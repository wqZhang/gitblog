{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/donate.png","path":"img/donate.png","modified":1,"renderable":0},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"7bda14b2e2725b8d0e34e48561f65e96d8bb9909","modified":1543978388402},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1543825319066},{"_id":"themes/aircloud/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322054},{"_id":"themes/aircloud/.git","hash":"88a226fa8205173f10fe28625a2fde6ee48f88b7","modified":1543825321986},{"_id":"themes/aircloud/.gitignore","hash":"5a4a925cfd624633dafaacaced416c8d7272dcef","modified":1543825322053},{"_id":"themes/aircloud/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1543825322054},{"_id":"themes/aircloud/.DS_Store","hash":"a1940e5686d7385c865dbd548b8378617ab826d3","modified":1543991159421},{"_id":"themes/aircloud/readme-en.md","hash":"2903b1e9db12cd72ed6f8c10be14cd7f6afd82cf","modified":1543825322056},{"_id":"themes/aircloud/readme.md","hash":"a45c196525b6d1d9cae39b4567c4fc220776a690","modified":1543825322056},{"_id":"source/about/index.md","hash":"be4be520f0787550c4886697fa0781fd59ecd464","modified":1543977361527},{"_id":"source/_posts/20181205think.md","hash":"d5fdaa0c12efa5805d261110b72bc6df542c4200","modified":1543995500877},{"_id":"source/_posts/.DS_Store","hash":"43461deece5e46e819a105ae81639f36cdc7c3e3","modified":1543994293296},{"_id":"source/_posts/20170706ignitefirst.md","hash":"d8b30ad22d329ce8436ba4a67029601585c7dbb6","modified":1543822615221},{"_id":"source/_posts/20170831-kindle-to-xy.md","hash":"d38fb73f5251e6a0d75b519dbbc2b230fd65d4c3","modified":1543822583767},{"_id":"source/_posts/graphql1.md","hash":"a4f62d207ec7a4e77e33d1eb1a73cace541556a7","modified":1543816483233},{"_id":"source/_posts/firstpost.md","hash":"e52de5dce3396d0a6f649a823a60b7ba8244c732","modified":1543822522321},{"_id":"source/_posts/graphsql2.md","hash":"17eb07e20477a113b63c1eceb94e170a825b23b4","modified":1543822480694},{"_id":"source/_posts/think20170410.md","hash":"5137dda36b725b82eb9a5cbdd489388ccb20b417","modified":1543822438614},{"_id":"source/tags/index.md","hash":"4e3dfcd992b0772a4b8b034fe41ead1cc7ce9903","modified":1543825319079},{"_id":"source/_posts/think20170522.md","hash":"b8c7b980b2db15aa92c9fb74f959073c8de9ce9e","modified":1543978423759},{"_id":"source/img/.DS_Store","hash":"59a5eef338d2ce44a08afff9351fcca3ecdd1b33","modified":1543978376358},{"_id":"source/img/avatar.jpg","hash":"c4b9e3ea22a71d6c6082d0e217e2155cc4e4639e","modified":1543977961234},{"_id":"source/img/favicon.ico","hash":"6722661132a864cf8e5a7a59825911fddbf66e51","modified":1543978079107},{"_id":"source/img/donate.png","hash":"0df2a5bf0d61acf1c1810982d6590f885ab00be7","modified":1543816483236},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322055},{"_id":"themes/aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322056},{"_id":"themes/aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1543825322054},{"_id":"themes/aircloud/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1543825322054},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1543825322054},{"_id":"themes/aircloud/layout/.DS_Store","hash":"4abdb214da87515abfe30489948c005e49d4f8a2","modified":1543991159422},{"_id":"themes/aircloud/layout/about.ejs","hash":"cec034166ce08d2f8c961178e07b2f0ceac95cf2","modified":1543825322055},{"_id":"themes/aircloud/layout/archive.ejs","hash":"4fd37643dd1fc8d474b773ec5f365634078fd175","modified":1543825322055},{"_id":"themes/aircloud/layout/layout.ejs","hash":"7efd113aee90e698e187d0ea1f0b42a1c00d210e","modified":1543825322055},{"_id":"themes/aircloud/layout/index.ejs","hash":"a4ebf04c9fef0e3837c005e8e2c92902fe7c47f8","modified":1543825322055},{"_id":"themes/aircloud/layout/post.ejs","hash":"6aa9422ee26dce286f449da1f2fb7883e1c5b9dd","modified":1543825322056},{"_id":"themes/aircloud/layout/tags.ejs","hash":"21990104ff12deafa1b5d25593180bb838358ec3","modified":1543825322056},{"_id":"themes/aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322057},{"_id":"themes/aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322057},{"_id":"themes/aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322058},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322058},{"_id":"themes/aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322062},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322062},{"_id":"themes/aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322063},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543825322063},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"1e17883829d1d33db39431a9eb10540de3eb0ad9","modified":1543991392791},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1543825322054},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"b2a67207b3409802df29ed451e39c5ade872cad0","modified":1543825322055},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"3f18d5d4951a205bab25b08d6bf85b054c84a21b","modified":1543825322055},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1543825322055},{"_id":"themes/aircloud/source/_less/common.less","hash":"f3bda389953533dbb69651f078a8606b0d9a5820","modified":1543825322058},{"_id":"themes/aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1543825322057},{"_id":"themes/aircloud/source/_less/common.css","hash":"7f21f9554fc126dc73d5f88884d1a5f94d1c4740","modified":1543825322058},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1543825322057},{"_id":"themes/aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1543825322059},{"_id":"themes/aircloud/source/_less/donate.css","hash":"ae6a676a42321512f0536c5230bb53084aaf2c2f","modified":1543825322058},{"_id":"themes/aircloud/source/_less/gitment.css","hash":"7d560b64e367129f98424052c660ae82b03a1d02","modified":1543825322059},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1543825322060},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1543825322061},{"_id":"themes/aircloud/source/_less/hightlight.css","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1543825322061},{"_id":"themes/aircloud/source/_less/index.css","hash":"52fe4d1b93dfb4c9c9d63e24862354b6a0ef47f8","modified":1543825322061},{"_id":"themes/aircloud/source/_less/layout.css","hash":"7b3163f08ac7060f322853a53d81ad86e2a68d1f","modified":1543825322061},{"_id":"themes/aircloud/source/_less/index.less","hash":"502d689e3568056cc27dd4da7da2499b0be4253e","modified":1543825322061},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1543825322062},{"_id":"themes/aircloud/source/_less/nav.less","hash":"b30e0041866d36435ca8cb31a66d06136e2ee1c8","modified":1543825322062},{"_id":"themes/aircloud/source/_less/nav.css","hash":"492249435dc74bb311c8a7b71b5feb86078116a6","modified":1543825322062},{"_id":"themes/aircloud/source/_less/post.less","hash":"2b7caae41a97c8f05f2acd98194088360c51a0a0","modified":1543825322062},{"_id":"themes/aircloud/source/_less/post.css","hash":"e3ee1d955887e90bff28480fd5ce4a04fcec54a6","modified":1543825322062},{"_id":"themes/aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1543825322063},{"_id":"themes/aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1543825322063},{"_id":"themes/aircloud/source/_less/toc.css","hash":"152d9b5f718cf3392edef9cb07327b431d0aca5a","modified":1543825322063},{"_id":"themes/aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1543825322064},{"_id":"themes/aircloud/source/_less/toc.less","hash":"bfe4006edf38f5329e00ecfff5f03240a2184a85","modified":1543825322063},{"_id":"themes/aircloud/source/_less/variables.less","hash":"49503f7a6c51edd6f1dbdea5345df6bb903b18a5","modified":1543825322064},{"_id":"themes/aircloud/source/js/index.js","hash":"1a773830be0ba57636f430918c8b888ff7dbc444","modified":1543825322066},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1543825322064},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"6fb2a212eb0cc9a32472906f708556f65fa6f2b4","modified":1543825322064},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1543825322065},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"52fc05828f77d9a5a65eb0aca37edc22463d885f","modified":1543825322057},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e84340aaa76f8eb303ea2fbcc7d1a49ab024f16b","modified":1543825322057},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1543825322066}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-12-03T08:21:59.066Z","updated":"2018-12-03T08:21:59.066Z","path":"404.html","title":"","comments":1,"_id":"cjpav2pto0000plp4ilozemjs","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2018-12-04T20:48:33.000Z","comments":1,"_content":"\n\n>大多数时候，都在思考自己该走向何方\n\nMail: wqzhang0728@foxmail.com\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2018-12-05 04:48:33\ncomments: true\n---\n\n\n>大多数时候，都在思考自己该走向何方\n\nMail: wqzhang0728@foxmail.com\n\n9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。\n\n<p style=\"text-align:right;\">\n    —— <a href=\"http://www.zhihu.com/question/19687065\">李书航 － 什么是「共产中文腔调」？ </a>\n</p>","updated":"2018-12-05T02:36:01.527Z","path":"about/index.html","_id":"cjpav2pu20001plp4jtfpmonc","content":"<blockquote>\n<p>大多数时候，都在思考自己该走向何方</p>\n</blockquote>\n<p>Mail: <a href=\"mailto:wqzhang0728@foxmail.com\" target=\"_blank\" rel=\"noopener\">wqzhang0728@foxmail.com</a></p>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>大多数时候，都在思考自己该走向何方</p>\n</blockquote>\n<p>Mail: <a href=\"mailto:wqzhang0728@foxmail.com\" target=\"_blank\" rel=\"noopener\">wqzhang0728@foxmail.com</a></p>\n<p>9月21日上午，阳光明媚，鲜花斗艳。帕洛阿尔托苹果店里欢声笑语，人头攒动。苹果公司首席执行官蒂姆·库克先生在店长欧阳猛南陪同下，不远千米，深入到一线店面，为那里的员工带去节曰的问候和良好的祝愿。<br><br>“果粉们，你们辛苦了，我代表某果公司，祝你们身体健康，生活幸福，工作成功！”库克亲切慰问广大员工和顾客，并就iOS7、iPhone 5S和iPhone 5C的销售状况进行调研。 <br><br>“您现在每月工资有多少？肾5S拿到了吗？”在店里，库克关切地向果粉们问起这一问题。当听说果粉们排到了5S，库克满意地连连点头。接着他指出，近年来苹果事业发展取得巨大成就，特别是iPhone影响剧增，老百姓对iOS满意度逐步提高，在这个转变过程中，果粉的辛勤工作功不可没。<br><br>库克看到一个中国小朋友在排队买iPhone 5S，亲切的问：“5288元一台能承受不？”小朋友回答到：“能！”当得知这位小朋友卖了一个肾来买iPhone 5S时，库克叮嘱道：“在支持苹果的同时，也要爱护身体。”<br><br>库克与购买苹果手机的果粉们兴致勃勃地参观了苹果专卖店，和员工们拉了拉家常，并饶有兴趣地玩了四盘切西瓜游戏，与普通员工同乐。<br><br>在交谈中，库克多次关心地强调：“有了iPhone 5C，就不卖iPhone 5了。”并对顾客说：“好好休息，身体是革命的本钱嘛！”会谈始终在亲切友好的气氛中进行。<br><br>顾客们就库克的讲话达成了广泛的共识，并承认世界上只有iOS最流畅，要紧紧的团结在以库克先生为首席执行官的苹果公司集体周围，一心一意抓学习，聚精会神谋发展。<br><br>帕洛阿尔托苹果专卖店当日原则通过《蒂姆·库克首席执行官在加州新苹果店的讲话纪要》，并下发各分店认真学习、研讨。</p>\n<p style=\"text-align:right;\"><br>    —— <a href=\"http://www.zhihu.com/question/19687065\" target=\"_blank\" rel=\"noopener\">李书航 － 什么是「共产中文腔调」？ </a><br></p>"},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n","date":"2018-12-05T02:37:00.712Z","updated":"2018-12-03T08:21:59.079Z","path":"tags/index.html","comments":1,"_id":"cjpav2pum000nplp4uithgq47","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"最近面试的一些总结","date":"2018-12-05T07:18:16.000Z","_content":"","source":"_posts/20181205think.md","raw":"---\ntitle: 最近面试的一些总结\ndate: 2018-12-05 15:18:16\ntags: 面试 java\n---\n","slug":"20181205think","published":1,"updated":"2018-12-05T07:38:20.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2pu20002plp4rt4txtfi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Windows系统下ignite坑，启动找不到主类","date":"2017-07-06T02:34:34.000Z","_content":"最近一直没来更新，惭愧\n正好刚从ignite一个大坑出来，必须来记录下了\n\n<!--more-->\n\n正如我题目所说的，就是在windows系统下启动找不到主类的坑\n因为项目原因，我接触了Apache ignite这个东西，官方说它是\n`内存数据组织是高性能的、集成化的以及分布式的内存平台`。\n具体有哪些东西，让我引一张官方的图：\n![img1](https://files.readme.io/8fed3b7-apache-ignite.png)\n\n因为我也是第一次接触，所以就按照[官方文档](https://ignite.apache.org/)一步一步来安装，学习\n这里不得不说它们的[中文文档](https://www.zybuluo.com/liyuj/note/230739)棒棒哒！\n\n我下载了2.0版本的二进制版本，放在了`C:\\Program Files`目录下，然后安装新手教程进行启动，\n在命令行到`bin`目录下运行ignite.bat文件，文档说的很清楚，出现以下提示就说明成功了：\n\n\t[02:49:12] Ignite node started OK (id=ab5d18a6)\n\t[02:49:12] Topology snapshot [ver=1, nodes=1, CPUs=8, heap=1.0GB]\n\n但是我这确报错了。。。得到下面的提示\n\n![img2](http://img.wqzhang.top/ignite07064.png)\n\n我就奇了怪了，这还能找不到主类，对比了文件大小，和网上的数据是一样的\n仔细看了下，上面提示说考虑把ignite-spring路径放到classpath\n\n对比文档，这种错误应该是配置了ignite-spring模块但是没有引入ignite-spring相关包\n只需要去lib下加入ignite-spring的相关jar依赖就行了\n\n但是！\n\n![img3](http://img.wqzhang.top/ignite07063.png)\n\n我的lib下已经加入了ignite-spring包仍然报错。。。。。这。。扎心了，老铁\n无奈的我只能去加了几个QQ群问问大神。。。都表示没遇到过这个错误\n这个时候有个朋友说了句会不会是空格的问题，刚开始我还没意识到他的意思，\n我什么都还没开始，配置也没动过，哪里有空格呢？\n后来才看到。。。。我的项目存放的路径 `C:\\Program Files` \n妹的。。不会吧。。。。我试这把项目拷贝到C盘下，重新配置Path变量，再尝试\n\n![img4](http://img.wqzhang.top/ignite07065.png)\n\n终于正常了，果然问题是出在那个空格上，导致读不到相关的模块依赖而报错。。。\n而我一直在这个问题上困扰了好久。。。知道真相后，我斯巴达了。。。\n后面继续学习了，这个坑。。应该是我自己给自己挖的坑吧。。。。\n好了，后面学习的其他问题也回来更新的，鼓捣拜","source":"_posts/20170706ignitefirst.md","raw":"---\ntitle: Windows系统下ignite坑，启动找不到主类\ndate: 2017-07-06 10:34:34\ntags: ignite\n---\n最近一直没来更新，惭愧\n正好刚从ignite一个大坑出来，必须来记录下了\n\n<!--more-->\n\n正如我题目所说的，就是在windows系统下启动找不到主类的坑\n因为项目原因，我接触了Apache ignite这个东西，官方说它是\n`内存数据组织是高性能的、集成化的以及分布式的内存平台`。\n具体有哪些东西，让我引一张官方的图：\n![img1](https://files.readme.io/8fed3b7-apache-ignite.png)\n\n因为我也是第一次接触，所以就按照[官方文档](https://ignite.apache.org/)一步一步来安装，学习\n这里不得不说它们的[中文文档](https://www.zybuluo.com/liyuj/note/230739)棒棒哒！\n\n我下载了2.0版本的二进制版本，放在了`C:\\Program Files`目录下，然后安装新手教程进行启动，\n在命令行到`bin`目录下运行ignite.bat文件，文档说的很清楚，出现以下提示就说明成功了：\n\n\t[02:49:12] Ignite node started OK (id=ab5d18a6)\n\t[02:49:12] Topology snapshot [ver=1, nodes=1, CPUs=8, heap=1.0GB]\n\n但是我这确报错了。。。得到下面的提示\n\n![img2](http://img.wqzhang.top/ignite07064.png)\n\n我就奇了怪了，这还能找不到主类，对比了文件大小，和网上的数据是一样的\n仔细看了下，上面提示说考虑把ignite-spring路径放到classpath\n\n对比文档，这种错误应该是配置了ignite-spring模块但是没有引入ignite-spring相关包\n只需要去lib下加入ignite-spring的相关jar依赖就行了\n\n但是！\n\n![img3](http://img.wqzhang.top/ignite07063.png)\n\n我的lib下已经加入了ignite-spring包仍然报错。。。。。这。。扎心了，老铁\n无奈的我只能去加了几个QQ群问问大神。。。都表示没遇到过这个错误\n这个时候有个朋友说了句会不会是空格的问题，刚开始我还没意识到他的意思，\n我什么都还没开始，配置也没动过，哪里有空格呢？\n后来才看到。。。。我的项目存放的路径 `C:\\Program Files` \n妹的。。不会吧。。。。我试这把项目拷贝到C盘下，重新配置Path变量，再尝试\n\n![img4](http://img.wqzhang.top/ignite07065.png)\n\n终于正常了，果然问题是出在那个空格上，导致读不到相关的模块依赖而报错。。。\n而我一直在这个问题上困扰了好久。。。知道真相后，我斯巴达了。。。\n后面继续学习了，这个坑。。应该是我自己给自己挖的坑吧。。。。\n好了，后面学习的其他问题也回来更新的，鼓捣拜","slug":"20170706ignitefirst","published":1,"updated":"2018-12-03T07:36:55.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2pu50003plp4b0nd0wpb","content":"<p>最近一直没来更新，惭愧<br>正好刚从ignite一个大坑出来，必须来记录下了</p>\n<a id=\"more\"></a>\n<p>正如我题目所说的，就是在windows系统下启动找不到主类的坑<br>因为项目原因，我接触了Apache ignite这个东西，官方说它是<br><code>内存数据组织是高性能的、集成化的以及分布式的内存平台</code>。<br>具体有哪些东西，让我引一张官方的图：<br><img src=\"https://files.readme.io/8fed3b7-apache-ignite.png\" alt=\"img1\"></p>\n<p>因为我也是第一次接触，所以就按照<a href=\"https://ignite.apache.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>一步一步来安装，学习<br>这里不得不说它们的<a href=\"https://www.zybuluo.com/liyuj/note/230739\" target=\"_blank\" rel=\"noopener\">中文文档</a>棒棒哒！</p>\n<p>我下载了2.0版本的二进制版本，放在了<code>C:\\Program Files</code>目录下，然后安装新手教程进行启动，<br>在命令行到<code>bin</code>目录下运行ignite.bat文件，文档说的很清楚，出现以下提示就说明成功了：</p>\n<pre><code>[02:49:12] Ignite node started OK (id=ab5d18a6)\n[02:49:12] Topology snapshot [ver=1, nodes=1, CPUs=8, heap=1.0GB]\n</code></pre><p>但是我这确报错了。。。得到下面的提示</p>\n<p><img src=\"http://img.wqzhang.top/ignite07064.png\" alt=\"img2\"></p>\n<p>我就奇了怪了，这还能找不到主类，对比了文件大小，和网上的数据是一样的<br>仔细看了下，上面提示说考虑把ignite-spring路径放到classpath</p>\n<p>对比文档，这种错误应该是配置了ignite-spring模块但是没有引入ignite-spring相关包<br>只需要去lib下加入ignite-spring的相关jar依赖就行了</p>\n<p>但是！</p>\n<p><img src=\"http://img.wqzhang.top/ignite07063.png\" alt=\"img3\"></p>\n<p>我的lib下已经加入了ignite-spring包仍然报错。。。。。这。。扎心了，老铁<br>无奈的我只能去加了几个QQ群问问大神。。。都表示没遇到过这个错误<br>这个时候有个朋友说了句会不会是空格的问题，刚开始我还没意识到他的意思，<br>我什么都还没开始，配置也没动过，哪里有空格呢？<br>后来才看到。。。。我的项目存放的路径 <code>C:\\Program Files</code><br>妹的。。不会吧。。。。我试这把项目拷贝到C盘下，重新配置Path变量，再尝试</p>\n<p><img src=\"http://img.wqzhang.top/ignite07065.png\" alt=\"img4\"></p>\n<p>终于正常了，果然问题是出在那个空格上，导致读不到相关的模块依赖而报错。。。<br>而我一直在这个问题上困扰了好久。。。知道真相后，我斯巴达了。。。<br>后面继续学习了，这个坑。。应该是我自己给自己挖的坑吧。。。。<br>好了，后面学习的其他问题也回来更新的，鼓捣拜</p>\n","site":{"data":{}},"excerpt":"<p>最近一直没来更新，惭愧<br>正好刚从ignite一个大坑出来，必须来记录下了</p>","more":"<p>正如我题目所说的，就是在windows系统下启动找不到主类的坑<br>因为项目原因，我接触了Apache ignite这个东西，官方说它是<br><code>内存数据组织是高性能的、集成化的以及分布式的内存平台</code>。<br>具体有哪些东西，让我引一张官方的图：<br><img src=\"https://files.readme.io/8fed3b7-apache-ignite.png\" alt=\"img1\"></p>\n<p>因为我也是第一次接触，所以就按照<a href=\"https://ignite.apache.org/\" target=\"_blank\" rel=\"noopener\">官方文档</a>一步一步来安装，学习<br>这里不得不说它们的<a href=\"https://www.zybuluo.com/liyuj/note/230739\" target=\"_blank\" rel=\"noopener\">中文文档</a>棒棒哒！</p>\n<p>我下载了2.0版本的二进制版本，放在了<code>C:\\Program Files</code>目录下，然后安装新手教程进行启动，<br>在命令行到<code>bin</code>目录下运行ignite.bat文件，文档说的很清楚，出现以下提示就说明成功了：</p>\n<pre><code>[02:49:12] Ignite node started OK (id=ab5d18a6)\n[02:49:12] Topology snapshot [ver=1, nodes=1, CPUs=8, heap=1.0GB]\n</code></pre><p>但是我这确报错了。。。得到下面的提示</p>\n<p><img src=\"http://img.wqzhang.top/ignite07064.png\" alt=\"img2\"></p>\n<p>我就奇了怪了，这还能找不到主类，对比了文件大小，和网上的数据是一样的<br>仔细看了下，上面提示说考虑把ignite-spring路径放到classpath</p>\n<p>对比文档，这种错误应该是配置了ignite-spring模块但是没有引入ignite-spring相关包<br>只需要去lib下加入ignite-spring的相关jar依赖就行了</p>\n<p>但是！</p>\n<p><img src=\"http://img.wqzhang.top/ignite07063.png\" alt=\"img3\"></p>\n<p>我的lib下已经加入了ignite-spring包仍然报错。。。。。这。。扎心了，老铁<br>无奈的我只能去加了几个QQ群问问大神。。。都表示没遇到过这个错误<br>这个时候有个朋友说了句会不会是空格的问题，刚开始我还没意识到他的意思，<br>我什么都还没开始，配置也没动过，哪里有空格呢？<br>后来才看到。。。。我的项目存放的路径 <code>C:\\Program Files</code><br>妹的。。不会吧。。。。我试这把项目拷贝到C盘下，重新配置Path变量，再尝试</p>\n<p><img src=\"http://img.wqzhang.top/ignite07065.png\" alt=\"img4\"></p>\n<p>终于正常了，果然问题是出在那个空格上，导致读不到相关的模块依赖而报错。。。<br>而我一直在这个问题上困扰了好久。。。知道真相后，我斯巴达了。。。<br>后面继续学习了，这个坑。。应该是我自己给自己挖的坑吧。。。。<br>好了，后面学习的其他问题也回来更新的，鼓捣拜</p>"},{"title":"给我宝宝写的下载推送kindle电子书教程","date":"2017-08-31T08:16:43.000Z","_content":"我的宝宝是个文学作品爱好者，生日礼物给她买了kindle，不过还没教她怎么把电子书放到kindle去\n所以这篇文章写给我的智障宝宝\n嗯，应该是比较智障的教程了 --！\n\n<!-- more -->\n有点长，你也可以[点我直接看最简单的方法](#jump)\n\n想要把电子书放到kindle里，第一步，你的先买一部kindle\n![机智](http://img.wqzhang.top/jizhiruwo.jpg)\n好吧，我知道你想说这不是废话么。。。。额，的确是废话，下面我们开始认真的讲(基于你已经买了kindle，不限版本)\n\n- 第一步，注册一个亚马逊账号，并把kindle绑定到你的账号上\n  这一步我已经做完了，所以我就不写了，下面是我宝宝的账号\n  <b>用户名是你的电话号码，密码是你的生日，比如我的生日是90年7月28，那么就是19900728</b>\n\n- 第二步，要配置好一些能推送的邮箱，这一块可以在亚马逊的首页的 我的账户 -> 管理我的内容和设备 -> 设置一栏里面设置，在设置的最下面有已认可的发件人电子邮箱列表，这里可以管理允许推送的邮箱,如图\n![z1](http://img.wqzhang.top/kindle1.jpg)\n![z2](http://img.wqzhang.top/kindle2.jpg)\n![z3](http://img.wqzhang.top/kindle3.jpg)\n\n- 第三步就可以下载推送电子书了，首先我们看看它支持的格式\n![z4](http://img.wqzhang.top/kindle4.jpg)\n\n最主要的就是**azw**和**mobi**这两种格式，其他的像txt和pdf也是可以的，不过一般我们就用**azw**和**mobi**格式，下载推送电子书一般有两种方式\n\n1. 直接在亚马逊上购买，就像买东西一样，买电子书，因为你的账号和你的kindle已经绑定了，所以你买了书就直接推送到你的kindle，这是最方便的\n2. 自己在网上下载电子书，然后用配置好的邮箱推送到kindle\n   这种方式说白了就是给自己的kindle发邮件，而电子书是附件，比如\n![z5](http://img.wqzhang.top/kindle5.jpg)\n\n这里面发件人就是你，收件人就是你kindle的邮箱，那么你的kindle邮箱号是多少呢？\n在刚才的设置可发送邮箱的上方有，另外我宝宝的就是 86电话号码@kindle.cn(电话号码就是你的电话号码！)\n\n那在哪里去找电子书呢，我喜欢在这个网站找  \n[http://readfree.me/](http://readfree.me/)\n我以前用kindle的时候就喜欢在这个网站下载书，挺多的，连程序猿的书都有挺多的，还有很多国外的。。。不过下载了都没看 --！\n现在它的规则改变了很多，现在是每天登陆可以获得1-4积分，1积分可以下载或推送一本书，积分累计\n我给你申请了两个账号可以使用，有时候我就会登陆上去累计点积分\n```\n用户名：我的QQ@qq.com 密码：你的生日    也就是和亚马逊密码一样\n用户名：我的电话@163.com 密码：你的生日\n```\n(这里  **我的QQ**  和 **我的电话** 都需要换成现实中号码哦 ：)\n\n这个网站登录后会自动跳到亚马逊网站去签到，不用管，再重新到这个网站就好了，登录后是这个样子的：\n![z6](http://img.wqzhang.top/kindle10.jpg)\n上面的搜索栏可以搜你想看的书，书名，或者作者\n不要把字打错了哦，打错了可是搜不到了，比如我们要找阿城的书，就去搜阿城\n\n![z7](http://img.wqzhang.top/kindle11.jpg)\n\n然后我们选一本点击一下封面，比如《棋王》\n\n![z8](http://img.wqzhang.top/kindle12.jpg)\n\n上面会显示这本书的介绍，亚马逊购买地址，以及类似的书籍，下面是可以下载推送的版本：\n**这里我要说明有一下，之前就说了会有格式选择，kindle支持的格式是awz，mobi，txt，pdf**\n**但是awz是亚马逊电子版本，一般来说加密了的，外面一般没有，pdf在kindle上看支持不是很好，一般也不建议，mobi是我推荐的版本**\n**另外在选择下载的时候最好先看一下评论，以及文件大小，太小说明可能内容不全**\n![z9](http://img.wqzhang.top/kindle13.jpg)\n选择好了要下载的版本就可以点击下载，就会把电子书下载到本地了\n然后用邮件发送给自己的kindle，kindle里面就会有这本书了\n\n每次都还要下载再发邮件推送是不是太麻烦了，还有简单的方法，就是这个网站提供了自动推送的功能\n它需要在网站配置好你的kindle账号，在kindle管理添加好支持推送的邮箱，这些我都给你配置好了，你可以直接使用\n在我们下载按钮旁边就有推送的按钮：\n![z10](http://img.wqzhang.top/kindle14.jpg)\n点击推送边上的下拉图标，就会出来可以推送到的kindle账号，直接选我配置好的账号，点击就可以了\n这样，这本书就自动推送到你的kindle了\n在上面的头像图标那里可以点击，在个人中心里面看推送的结果：\n![z11](http://img.wqzhang.top/kindle15.jpg)\n![z12](http://img.wqzhang.top/kindle16.jpg)\n\n怎么样，是不是还是挺简单的，还有更简单的方法，<span id = \"jump\">**那就是你想看什么书的时候直接告诉我就好了，一切我来搞定**</span>\n哈哈哈\n\n![cankui](http://img.wqzhang.top/caikui.jpg)\n终于又来写一篇了。。。。","source":"_posts/20170831-kindle-to-xy.md","raw":"---\ntitle: 给我宝宝写的下载推送kindle电子书教程\ndate: 2017-08-31 16:16:43\ntags: kindle 教程\n---\n我的宝宝是个文学作品爱好者，生日礼物给她买了kindle，不过还没教她怎么把电子书放到kindle去\n所以这篇文章写给我的智障宝宝\n嗯，应该是比较智障的教程了 --！\n\n<!-- more -->\n有点长，你也可以[点我直接看最简单的方法](#jump)\n\n想要把电子书放到kindle里，第一步，你的先买一部kindle\n![机智](http://img.wqzhang.top/jizhiruwo.jpg)\n好吧，我知道你想说这不是废话么。。。。额，的确是废话，下面我们开始认真的讲(基于你已经买了kindle，不限版本)\n\n- 第一步，注册一个亚马逊账号，并把kindle绑定到你的账号上\n  这一步我已经做完了，所以我就不写了，下面是我宝宝的账号\n  <b>用户名是你的电话号码，密码是你的生日，比如我的生日是90年7月28，那么就是19900728</b>\n\n- 第二步，要配置好一些能推送的邮箱，这一块可以在亚马逊的首页的 我的账户 -> 管理我的内容和设备 -> 设置一栏里面设置，在设置的最下面有已认可的发件人电子邮箱列表，这里可以管理允许推送的邮箱,如图\n![z1](http://img.wqzhang.top/kindle1.jpg)\n![z2](http://img.wqzhang.top/kindle2.jpg)\n![z3](http://img.wqzhang.top/kindle3.jpg)\n\n- 第三步就可以下载推送电子书了，首先我们看看它支持的格式\n![z4](http://img.wqzhang.top/kindle4.jpg)\n\n最主要的就是**azw**和**mobi**这两种格式，其他的像txt和pdf也是可以的，不过一般我们就用**azw**和**mobi**格式，下载推送电子书一般有两种方式\n\n1. 直接在亚马逊上购买，就像买东西一样，买电子书，因为你的账号和你的kindle已经绑定了，所以你买了书就直接推送到你的kindle，这是最方便的\n2. 自己在网上下载电子书，然后用配置好的邮箱推送到kindle\n   这种方式说白了就是给自己的kindle发邮件，而电子书是附件，比如\n![z5](http://img.wqzhang.top/kindle5.jpg)\n\n这里面发件人就是你，收件人就是你kindle的邮箱，那么你的kindle邮箱号是多少呢？\n在刚才的设置可发送邮箱的上方有，另外我宝宝的就是 86电话号码@kindle.cn(电话号码就是你的电话号码！)\n\n那在哪里去找电子书呢，我喜欢在这个网站找  \n[http://readfree.me/](http://readfree.me/)\n我以前用kindle的时候就喜欢在这个网站下载书，挺多的，连程序猿的书都有挺多的，还有很多国外的。。。不过下载了都没看 --！\n现在它的规则改变了很多，现在是每天登陆可以获得1-4积分，1积分可以下载或推送一本书，积分累计\n我给你申请了两个账号可以使用，有时候我就会登陆上去累计点积分\n```\n用户名：我的QQ@qq.com 密码：你的生日    也就是和亚马逊密码一样\n用户名：我的电话@163.com 密码：你的生日\n```\n(这里  **我的QQ**  和 **我的电话** 都需要换成现实中号码哦 ：)\n\n这个网站登录后会自动跳到亚马逊网站去签到，不用管，再重新到这个网站就好了，登录后是这个样子的：\n![z6](http://img.wqzhang.top/kindle10.jpg)\n上面的搜索栏可以搜你想看的书，书名，或者作者\n不要把字打错了哦，打错了可是搜不到了，比如我们要找阿城的书，就去搜阿城\n\n![z7](http://img.wqzhang.top/kindle11.jpg)\n\n然后我们选一本点击一下封面，比如《棋王》\n\n![z8](http://img.wqzhang.top/kindle12.jpg)\n\n上面会显示这本书的介绍，亚马逊购买地址，以及类似的书籍，下面是可以下载推送的版本：\n**这里我要说明有一下，之前就说了会有格式选择，kindle支持的格式是awz，mobi，txt，pdf**\n**但是awz是亚马逊电子版本，一般来说加密了的，外面一般没有，pdf在kindle上看支持不是很好，一般也不建议，mobi是我推荐的版本**\n**另外在选择下载的时候最好先看一下评论，以及文件大小，太小说明可能内容不全**\n![z9](http://img.wqzhang.top/kindle13.jpg)\n选择好了要下载的版本就可以点击下载，就会把电子书下载到本地了\n然后用邮件发送给自己的kindle，kindle里面就会有这本书了\n\n每次都还要下载再发邮件推送是不是太麻烦了，还有简单的方法，就是这个网站提供了自动推送的功能\n它需要在网站配置好你的kindle账号，在kindle管理添加好支持推送的邮箱，这些我都给你配置好了，你可以直接使用\n在我们下载按钮旁边就有推送的按钮：\n![z10](http://img.wqzhang.top/kindle14.jpg)\n点击推送边上的下拉图标，就会出来可以推送到的kindle账号，直接选我配置好的账号，点击就可以了\n这样，这本书就自动推送到你的kindle了\n在上面的头像图标那里可以点击，在个人中心里面看推送的结果：\n![z11](http://img.wqzhang.top/kindle15.jpg)\n![z12](http://img.wqzhang.top/kindle16.jpg)\n\n怎么样，是不是还是挺简单的，还有更简单的方法，<span id = \"jump\">**那就是你想看什么书的时候直接告诉我就好了，一切我来搞定**</span>\n哈哈哈\n\n![cankui](http://img.wqzhang.top/caikui.jpg)\n终于又来写一篇了。。。。","slug":"20170831-kindle-to-xy","published":1,"updated":"2018-12-03T07:36:23.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2pu80005plp45xts7d36","content":"<p>我的宝宝是个文学作品爱好者，生日礼物给她买了kindle，不过还没教她怎么把电子书放到kindle去<br>所以这篇文章写给我的智障宝宝<br>嗯，应该是比较智障的教程了 –！</p>\n<a id=\"more\"></a>\n<p>有点长，你也可以<a href=\"#jump\">点我直接看最简单的方法</a></p>\n<p>想要把电子书放到kindle里，第一步，你的先买一部kindle<br><img src=\"http://img.wqzhang.top/jizhiruwo.jpg\" alt=\"机智\"><br>好吧，我知道你想说这不是废话么。。。。额，的确是废话，下面我们开始认真的讲(基于你已经买了kindle，不限版本)</p>\n<ul>\n<li><p>第一步，注册一个亚马逊账号，并把kindle绑定到你的账号上<br>这一步我已经做完了，所以我就不写了，下面是我宝宝的账号<br><b>用户名是你的电话号码，密码是你的生日，比如我的生日是90年7月28，那么就是19900728</b></p>\n</li>\n<li><p>第二步，要配置好一些能推送的邮箱，这一块可以在亚马逊的首页的 我的账户 -&gt; 管理我的内容和设备 -&gt; 设置一栏里面设置，在设置的最下面有已认可的发件人电子邮箱列表，这里可以管理允许推送的邮箱,如图<br><img src=\"http://img.wqzhang.top/kindle1.jpg\" alt=\"z1\"><br><img src=\"http://img.wqzhang.top/kindle2.jpg\" alt=\"z2\"><br><img src=\"http://img.wqzhang.top/kindle3.jpg\" alt=\"z3\"></p>\n</li>\n<li><p>第三步就可以下载推送电子书了，首先我们看看它支持的格式<br><img src=\"http://img.wqzhang.top/kindle4.jpg\" alt=\"z4\"></p>\n</li>\n</ul>\n<p>最主要的就是<strong>azw</strong>和<strong>mobi</strong>这两种格式，其他的像txt和pdf也是可以的，不过一般我们就用<strong>azw</strong>和<strong>mobi</strong>格式，下载推送电子书一般有两种方式</p>\n<ol>\n<li>直接在亚马逊上购买，就像买东西一样，买电子书，因为你的账号和你的kindle已经绑定了，所以你买了书就直接推送到你的kindle，这是最方便的</li>\n<li>自己在网上下载电子书，然后用配置好的邮箱推送到kindle<br>这种方式说白了就是给自己的kindle发邮件，而电子书是附件，比如<br><img src=\"http://img.wqzhang.top/kindle5.jpg\" alt=\"z5\"></li>\n</ol>\n<p>这里面发件人就是你，收件人就是你kindle的邮箱，那么你的kindle邮箱号是多少呢？<br>在刚才的设置可发送邮箱的上方有，另外我宝宝的就是 86电话号码@kindle.cn(电话号码就是你的电话号码！)</p>\n<p>那在哪里去找电子书呢，我喜欢在这个网站找<br><a href=\"http://readfree.me/\" target=\"_blank\" rel=\"noopener\">http://readfree.me/</a><br>我以前用kindle的时候就喜欢在这个网站下载书，挺多的，连程序猿的书都有挺多的，还有很多国外的。。。不过下载了都没看 –！<br>现在它的规则改变了很多，现在是每天登陆可以获得1-4积分，1积分可以下载或推送一本书，积分累计<br>我给你申请了两个账号可以使用，有时候我就会登陆上去累计点积分<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名：我的QQ@qq<span class=\"selector-class\">.com</span> 密码：你的生日    也就是和亚马逊密码一样</span><br><span class=\"line\">用户名：我的电话@<span class=\"number\">163</span><span class=\"selector-class\">.com</span> 密码：你的生日</span><br></pre></td></tr></table></figure></p>\n<p>(这里  <strong>我的QQ</strong>  和 <strong>我的电话</strong> 都需要换成现实中号码哦 ：)</p>\n<p>这个网站登录后会自动跳到亚马逊网站去签到，不用管，再重新到这个网站就好了，登录后是这个样子的：<br><img src=\"http://img.wqzhang.top/kindle10.jpg\" alt=\"z6\"><br>上面的搜索栏可以搜你想看的书，书名，或者作者<br>不要把字打错了哦，打错了可是搜不到了，比如我们要找阿城的书，就去搜阿城</p>\n<p><img src=\"http://img.wqzhang.top/kindle11.jpg\" alt=\"z7\"></p>\n<p>然后我们选一本点击一下封面，比如《棋王》</p>\n<p><img src=\"http://img.wqzhang.top/kindle12.jpg\" alt=\"z8\"></p>\n<p>上面会显示这本书的介绍，亚马逊购买地址，以及类似的书籍，下面是可以下载推送的版本：<br><strong>这里我要说明有一下，之前就说了会有格式选择，kindle支持的格式是awz，mobi，txt，pdf</strong><br><strong>但是awz是亚马逊电子版本，一般来说加密了的，外面一般没有，pdf在kindle上看支持不是很好，一般也不建议，mobi是我推荐的版本</strong><br><strong>另外在选择下载的时候最好先看一下评论，以及文件大小，太小说明可能内容不全</strong><br><img src=\"http://img.wqzhang.top/kindle13.jpg\" alt=\"z9\"><br>选择好了要下载的版本就可以点击下载，就会把电子书下载到本地了<br>然后用邮件发送给自己的kindle，kindle里面就会有这本书了</p>\n<p>每次都还要下载再发邮件推送是不是太麻烦了，还有简单的方法，就是这个网站提供了自动推送的功能<br>它需要在网站配置好你的kindle账号，在kindle管理添加好支持推送的邮箱，这些我都给你配置好了，你可以直接使用<br>在我们下载按钮旁边就有推送的按钮：<br><img src=\"http://img.wqzhang.top/kindle14.jpg\" alt=\"z10\"><br>点击推送边上的下拉图标，就会出来可以推送到的kindle账号，直接选我配置好的账号，点击就可以了<br>这样，这本书就自动推送到你的kindle了<br>在上面的头像图标那里可以点击，在个人中心里面看推送的结果：<br><img src=\"http://img.wqzhang.top/kindle15.jpg\" alt=\"z11\"><br><img src=\"http://img.wqzhang.top/kindle16.jpg\" alt=\"z12\"></p>\n<p>怎么样，是不是还是挺简单的，还有更简单的方法，<span id=\"jump\"><strong>那就是你想看什么书的时候直接告诉我就好了，一切我来搞定</strong></span><br>哈哈哈</p>\n<p><img src=\"http://img.wqzhang.top/caikui.jpg\" alt=\"cankui\"><br>终于又来写一篇了。。。。</p>\n","site":{"data":{}},"excerpt":"<p>我的宝宝是个文学作品爱好者，生日礼物给她买了kindle，不过还没教她怎么把电子书放到kindle去<br>所以这篇文章写给我的智障宝宝<br>嗯，应该是比较智障的教程了 –！</p>","more":"<p>有点长，你也可以<a href=\"#jump\">点我直接看最简单的方法</a></p>\n<p>想要把电子书放到kindle里，第一步，你的先买一部kindle<br><img src=\"http://img.wqzhang.top/jizhiruwo.jpg\" alt=\"机智\"><br>好吧，我知道你想说这不是废话么。。。。额，的确是废话，下面我们开始认真的讲(基于你已经买了kindle，不限版本)</p>\n<ul>\n<li><p>第一步，注册一个亚马逊账号，并把kindle绑定到你的账号上<br>这一步我已经做完了，所以我就不写了，下面是我宝宝的账号<br><b>用户名是你的电话号码，密码是你的生日，比如我的生日是90年7月28，那么就是19900728</b></p>\n</li>\n<li><p>第二步，要配置好一些能推送的邮箱，这一块可以在亚马逊的首页的 我的账户 -&gt; 管理我的内容和设备 -&gt; 设置一栏里面设置，在设置的最下面有已认可的发件人电子邮箱列表，这里可以管理允许推送的邮箱,如图<br><img src=\"http://img.wqzhang.top/kindle1.jpg\" alt=\"z1\"><br><img src=\"http://img.wqzhang.top/kindle2.jpg\" alt=\"z2\"><br><img src=\"http://img.wqzhang.top/kindle3.jpg\" alt=\"z3\"></p>\n</li>\n<li><p>第三步就可以下载推送电子书了，首先我们看看它支持的格式<br><img src=\"http://img.wqzhang.top/kindle4.jpg\" alt=\"z4\"></p>\n</li>\n</ul>\n<p>最主要的就是<strong>azw</strong>和<strong>mobi</strong>这两种格式，其他的像txt和pdf也是可以的，不过一般我们就用<strong>azw</strong>和<strong>mobi</strong>格式，下载推送电子书一般有两种方式</p>\n<ol>\n<li>直接在亚马逊上购买，就像买东西一样，买电子书，因为你的账号和你的kindle已经绑定了，所以你买了书就直接推送到你的kindle，这是最方便的</li>\n<li>自己在网上下载电子书，然后用配置好的邮箱推送到kindle<br>这种方式说白了就是给自己的kindle发邮件，而电子书是附件，比如<br><img src=\"http://img.wqzhang.top/kindle5.jpg\" alt=\"z5\"></li>\n</ol>\n<p>这里面发件人就是你，收件人就是你kindle的邮箱，那么你的kindle邮箱号是多少呢？<br>在刚才的设置可发送邮箱的上方有，另外我宝宝的就是 86电话号码@kindle.cn(电话号码就是你的电话号码！)</p>\n<p>那在哪里去找电子书呢，我喜欢在这个网站找<br><a href=\"http://readfree.me/\" target=\"_blank\" rel=\"noopener\">http://readfree.me/</a><br>我以前用kindle的时候就喜欢在这个网站下载书，挺多的，连程序猿的书都有挺多的，还有很多国外的。。。不过下载了都没看 –！<br>现在它的规则改变了很多，现在是每天登陆可以获得1-4积分，1积分可以下载或推送一本书，积分累计<br>我给你申请了两个账号可以使用，有时候我就会登陆上去累计点积分<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名：我的QQ@qq<span class=\"selector-class\">.com</span> 密码：你的生日    也就是和亚马逊密码一样</span><br><span class=\"line\">用户名：我的电话@<span class=\"number\">163</span><span class=\"selector-class\">.com</span> 密码：你的生日</span><br></pre></td></tr></table></figure></p>\n<p>(这里  <strong>我的QQ</strong>  和 <strong>我的电话</strong> 都需要换成现实中号码哦 ：)</p>\n<p>这个网站登录后会自动跳到亚马逊网站去签到，不用管，再重新到这个网站就好了，登录后是这个样子的：<br><img src=\"http://img.wqzhang.top/kindle10.jpg\" alt=\"z6\"><br>上面的搜索栏可以搜你想看的书，书名，或者作者<br>不要把字打错了哦，打错了可是搜不到了，比如我们要找阿城的书，就去搜阿城</p>\n<p><img src=\"http://img.wqzhang.top/kindle11.jpg\" alt=\"z7\"></p>\n<p>然后我们选一本点击一下封面，比如《棋王》</p>\n<p><img src=\"http://img.wqzhang.top/kindle12.jpg\" alt=\"z8\"></p>\n<p>上面会显示这本书的介绍，亚马逊购买地址，以及类似的书籍，下面是可以下载推送的版本：<br><strong>这里我要说明有一下，之前就说了会有格式选择，kindle支持的格式是awz，mobi，txt，pdf</strong><br><strong>但是awz是亚马逊电子版本，一般来说加密了的，外面一般没有，pdf在kindle上看支持不是很好，一般也不建议，mobi是我推荐的版本</strong><br><strong>另外在选择下载的时候最好先看一下评论，以及文件大小，太小说明可能内容不全</strong><br><img src=\"http://img.wqzhang.top/kindle13.jpg\" alt=\"z9\"><br>选择好了要下载的版本就可以点击下载，就会把电子书下载到本地了<br>然后用邮件发送给自己的kindle，kindle里面就会有这本书了</p>\n<p>每次都还要下载再发邮件推送是不是太麻烦了，还有简单的方法，就是这个网站提供了自动推送的功能<br>它需要在网站配置好你的kindle账号，在kindle管理添加好支持推送的邮箱，这些我都给你配置好了，你可以直接使用<br>在我们下载按钮旁边就有推送的按钮：<br><img src=\"http://img.wqzhang.top/kindle14.jpg\" alt=\"z10\"><br>点击推送边上的下拉图标，就会出来可以推送到的kindle账号，直接选我配置好的账号，点击就可以了<br>这样，这本书就自动推送到你的kindle了<br>在上面的头像图标那里可以点击，在个人中心里面看推送的结果：<br><img src=\"http://img.wqzhang.top/kindle15.jpg\" alt=\"z11\"><br><img src=\"http://img.wqzhang.top/kindle16.jpg\" alt=\"z12\"></p>\n<p>怎么样，是不是还是挺简单的，还有更简单的方法，<span id=\"jump\"><strong>那就是你想看什么书的时候直接告诉我就好了，一切我来搞定</strong></span><br>哈哈哈</p>\n<p><img src=\"http://img.wqzhang.top/caikui.jpg\" alt=\"cankui\"><br>终于又来写一篇了。。。。</p>"},{"title":"GrapgQL介绍(一)","date":"2017-04-05T14:46:39.000Z","reward":true,"_content":"\n最近在学习[GraphQL](http://www.graphql.org/) API查询语言，想把官网的介绍文档翻译一下，学习的同时分享知识。\n\n\n\n> 这一系列的文章是关于学习GraphQL怎么工作以及怎么使用。寻找怎么构建一个GraphQL服务？\n> 这里有一些继承于GraphQL的多种语言的库。\n\n<!--more-->\n\nGraphQL是一种针对你的API的查询语言，也是一种通过你对你的数据定义范式执行查询的服务器端运行时。\nGraphQL不会绑定特定的数据库或者存储引擎而是使用你当前的代码和数据。\n\n\n一个GraphQL服务通过定义范式和范式里的字段来创建，然后为范式里的每一个字段提供功能。\n例如，下面的GraphQL服务告诉我们谁登陆了(我)以及登陆用户的名称等一些信息：\n\n\ttype Query {\n\t\tme: User\n\t}\n\n\ttype User {\n\t\tid: ID\n\t\tname: String\n\t}\n\n匹配范式里每一个字段功能：\n\n\tfunction Query_me(request) {\n\t  return request.auth.user;\n\t}\n\n\tfunction User_name(user) {\n\t  return user.getName();\n\t}\n\n当一个GraphQL服务运行时(通常是一个web服务的一条URL)，它会接收GraphQL查询请求来验证和执行。\n接收的查询首先会被检查是不是只关联到定义好的范式和字段，然后运行提供的函数产生结果。\n\n一个查询的例子：\n\n\t{\n\t  me {\n\t\tname\n\t  }\n\t}\n\n生成的JSON结果：\n\n\t{\n\t  \"me\": {\n\t\t\"name\": \"Luke Skywalker\"\n\t  }\n\t}\n\t\n学习更多GraphQL -- 查询语言，范式系统，GraphQL服务如何工作以及\n使用QraphQL解决问题的最佳实践 -- 请阅读以下章节。\n\n# 查询和修改(Queries and Mutations)\n\n在这个章节，你将详细地学习如何在一个GrapQL服务器上查询。\n\n### 字段(Fields)\n\n最基本的，GraphQL可以请求对象上的指定字段。让我们看一个非常简单的查询以及结果：\n\n\t{\n\t  hero {\n\t\tname\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"hero\": {\n\t\t  \"name\": \"R2-D2\"\n\t\t}\n\t  }\n\t}\n\n你可以直接地看到查询语句和结果是一样的结构。这是GraphQL最基本的功能，因为服务器明确地知道客户\n需要哪些字段，所以你可以得到你预期的结果。\n\n在上面的例子中，字段name作为一个string类型返回，那个名字是星际大战主英雄的名字，`R2-D2`。\n\n\n> 顺便提一句 - 上面的查询语句是交互式的。也就是你可以按你的意愿改变结构并且得到对应的结果。\n> 尝试在`hero`对象的查询语句里增加一个`appearsIn`字段并看看新的结果。\n\n在上个例子中，我们得到了个字符串当我们要求返回hero的name字段，其实返回的字段也可以是对象。\n在例子中，你可以为返回的对象设置级联字段*sub-selection*。GraphQL查询可以联通相关的对象以及字段，\n让客户端在一个请求中得到所有需要的相关数据，而不是像传统REST架构那样向服务器往返请求多次。\n\n\t{\n\t  hero {\n\t\tname\n\t\t# Queries can have comments!\n\t\tfriends {\n\t\t  name\n\t\t}\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"hero\": {\n\t\t  \"name\": \"R2-D2\",\n\t\t  \"friends\": [\n\t\t\t{\n\t\t\t  \"name\": \"Luke Skywalker\"\n\t\t\t},\n\t\t\t{\n\t\t\t  \"name\": \"Han Solo\"\n\t\t\t},\n\t\t\t{\n\t\t\t  \"name\": \"Leia Organa\"\n\t\t\t}\n\t\t  ]\n\t\t}\n\t  }\n\t}\n\n注意上面的例子，字段`friends`返回了一个数组。GraphQL查询对于单个项和列表项看起来相同，\n但是我们根据给定的模式知道预期的内容。\n\n\n### 参数(Arguments)\n\n如果我们唯一可以做的只是遍历对象以及其字段，那GraphQL已经是获取数据非常有用的语言。但是，当你\n将参数传递给字段时，这就变的更有趣了。\n\n\t{\n\t  human(id: \"1000\") {\n\t\tname\n\t\theight\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"human\": {\n\t\t  \"name\": \"Luke Skywalker\",\n\t\t  \"height\": 1.72\n\t\t}\n\t  }\n\t}\n\n像REST系统，你只能传递一组参数-通过查询参数和请求URL。但是在GraphQL中，每个字段和嵌套对象都\n可以获得自己的一组参数。从而使GraphQL可以替代多个API提取。你甚至可以将参数传递到标量字段中，\n以便在服务器上实现数据转换，而不是分别在每个客户端上执行数据转换。\n\n\t{\n\t  human(id: \"1000\") {\n\t\tname\n\t\theight(unit: FOOT)\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"human\": {\n\t\t  \"name\": \"Luke Skywalker\",\n\t\t  \"height\": 5.6430448\n\t\t}\n\t  }\n\t}\n\n参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限选项\n（在这种情况下是长度单位，或者是METER或FOOT）之一。GraphQL带有自己的默认类型，但是在GraphQL上\n也可以自定义类型，自定义类型也可以在传输数据的时候序列化。\n\n[更多GraplQL类型内容](http://graphql.org/learn/schema/)\n\n\n### 别名(Aliases)\n\n如果你观察仔细，你可能已经发现了，返回的结果对象字段的名字匹配查询的字段但不包括参数，\n所以你不能直接的通过不同的参数查询同样的字段。这样你就需要别名-它可以让你把返回的结果重命名\n成任何其他你想要的。\n\n\t{\n\t  empireHero: hero(episode: EMPIRE) {\n\t\tname\n\t  }\n\t  jediHero: hero(episode: JEDI) {\n\t\tname\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"empireHero\": {\n\t\t  \"name\": \"Luke Skywalker\"\n\t\t},\n\t\t\"jediHero\": {\n\t\t  \"name\": \"R2-D2\"\n\t\t}\n\t  }\n\t}\n\n在上面的例子中，两个字段本应该有冲突，但是我们给他们定义了不同的别名后，\n就可以在一个请求中获取所有的结果。\n","source":"_posts/graphql1.md","raw":"---\ntitle: GrapgQL介绍(一)\ndate: 2017-04-05 22:46:39\ntags: graphQL\nreward: true\n---\n\n最近在学习[GraphQL](http://www.graphql.org/) API查询语言，想把官网的介绍文档翻译一下，学习的同时分享知识。\n\n\n\n> 这一系列的文章是关于学习GraphQL怎么工作以及怎么使用。寻找怎么构建一个GraphQL服务？\n> 这里有一些继承于GraphQL的多种语言的库。\n\n<!--more-->\n\nGraphQL是一种针对你的API的查询语言，也是一种通过你对你的数据定义范式执行查询的服务器端运行时。\nGraphQL不会绑定特定的数据库或者存储引擎而是使用你当前的代码和数据。\n\n\n一个GraphQL服务通过定义范式和范式里的字段来创建，然后为范式里的每一个字段提供功能。\n例如，下面的GraphQL服务告诉我们谁登陆了(我)以及登陆用户的名称等一些信息：\n\n\ttype Query {\n\t\tme: User\n\t}\n\n\ttype User {\n\t\tid: ID\n\t\tname: String\n\t}\n\n匹配范式里每一个字段功能：\n\n\tfunction Query_me(request) {\n\t  return request.auth.user;\n\t}\n\n\tfunction User_name(user) {\n\t  return user.getName();\n\t}\n\n当一个GraphQL服务运行时(通常是一个web服务的一条URL)，它会接收GraphQL查询请求来验证和执行。\n接收的查询首先会被检查是不是只关联到定义好的范式和字段，然后运行提供的函数产生结果。\n\n一个查询的例子：\n\n\t{\n\t  me {\n\t\tname\n\t  }\n\t}\n\n生成的JSON结果：\n\n\t{\n\t  \"me\": {\n\t\t\"name\": \"Luke Skywalker\"\n\t  }\n\t}\n\t\n学习更多GraphQL -- 查询语言，范式系统，GraphQL服务如何工作以及\n使用QraphQL解决问题的最佳实践 -- 请阅读以下章节。\n\n# 查询和修改(Queries and Mutations)\n\n在这个章节，你将详细地学习如何在一个GrapQL服务器上查询。\n\n### 字段(Fields)\n\n最基本的，GraphQL可以请求对象上的指定字段。让我们看一个非常简单的查询以及结果：\n\n\t{\n\t  hero {\n\t\tname\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"hero\": {\n\t\t  \"name\": \"R2-D2\"\n\t\t}\n\t  }\n\t}\n\n你可以直接地看到查询语句和结果是一样的结构。这是GraphQL最基本的功能，因为服务器明确地知道客户\n需要哪些字段，所以你可以得到你预期的结果。\n\n在上面的例子中，字段name作为一个string类型返回，那个名字是星际大战主英雄的名字，`R2-D2`。\n\n\n> 顺便提一句 - 上面的查询语句是交互式的。也就是你可以按你的意愿改变结构并且得到对应的结果。\n> 尝试在`hero`对象的查询语句里增加一个`appearsIn`字段并看看新的结果。\n\n在上个例子中，我们得到了个字符串当我们要求返回hero的name字段，其实返回的字段也可以是对象。\n在例子中，你可以为返回的对象设置级联字段*sub-selection*。GraphQL查询可以联通相关的对象以及字段，\n让客户端在一个请求中得到所有需要的相关数据，而不是像传统REST架构那样向服务器往返请求多次。\n\n\t{\n\t  hero {\n\t\tname\n\t\t# Queries can have comments!\n\t\tfriends {\n\t\t  name\n\t\t}\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"hero\": {\n\t\t  \"name\": \"R2-D2\",\n\t\t  \"friends\": [\n\t\t\t{\n\t\t\t  \"name\": \"Luke Skywalker\"\n\t\t\t},\n\t\t\t{\n\t\t\t  \"name\": \"Han Solo\"\n\t\t\t},\n\t\t\t{\n\t\t\t  \"name\": \"Leia Organa\"\n\t\t\t}\n\t\t  ]\n\t\t}\n\t  }\n\t}\n\n注意上面的例子，字段`friends`返回了一个数组。GraphQL查询对于单个项和列表项看起来相同，\n但是我们根据给定的模式知道预期的内容。\n\n\n### 参数(Arguments)\n\n如果我们唯一可以做的只是遍历对象以及其字段，那GraphQL已经是获取数据非常有用的语言。但是，当你\n将参数传递给字段时，这就变的更有趣了。\n\n\t{\n\t  human(id: \"1000\") {\n\t\tname\n\t\theight\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"human\": {\n\t\t  \"name\": \"Luke Skywalker\",\n\t\t  \"height\": 1.72\n\t\t}\n\t  }\n\t}\n\n像REST系统，你只能传递一组参数-通过查询参数和请求URL。但是在GraphQL中，每个字段和嵌套对象都\n可以获得自己的一组参数。从而使GraphQL可以替代多个API提取。你甚至可以将参数传递到标量字段中，\n以便在服务器上实现数据转换，而不是分别在每个客户端上执行数据转换。\n\n\t{\n\t  human(id: \"1000\") {\n\t\tname\n\t\theight(unit: FOOT)\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"human\": {\n\t\t  \"name\": \"Luke Skywalker\",\n\t\t  \"height\": 5.6430448\n\t\t}\n\t  }\n\t}\n\n参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限选项\n（在这种情况下是长度单位，或者是METER或FOOT）之一。GraphQL带有自己的默认类型，但是在GraphQL上\n也可以自定义类型，自定义类型也可以在传输数据的时候序列化。\n\n[更多GraplQL类型内容](http://graphql.org/learn/schema/)\n\n\n### 别名(Aliases)\n\n如果你观察仔细，你可能已经发现了，返回的结果对象字段的名字匹配查询的字段但不包括参数，\n所以你不能直接的通过不同的参数查询同样的字段。这样你就需要别名-它可以让你把返回的结果重命名\n成任何其他你想要的。\n\n\t{\n\t  empireHero: hero(episode: EMPIRE) {\n\t\tname\n\t  }\n\t  jediHero: hero(episode: JEDI) {\n\t\tname\n\t  }\n\t}\n\t结果：\n\t{\n\t  \"data\": {\n\t\t\"empireHero\": {\n\t\t  \"name\": \"Luke Skywalker\"\n\t\t},\n\t\t\"jediHero\": {\n\t\t  \"name\": \"R2-D2\"\n\t\t}\n\t  }\n\t}\n\n在上面的例子中，两个字段本应该有冲突，但是我们给他们定义了不同的别名后，\n就可以在一个请求中获取所有的结果。\n","slug":"graphql1","published":1,"updated":"2018-12-03T05:54:43.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2pu90006plp4sdoji4bl","content":"<p>最近在学习<a href=\"http://www.graphql.org/\" target=\"_blank\" rel=\"noopener\">GraphQL</a> API查询语言，想把官网的介绍文档翻译一下，学习的同时分享知识。</p>\n<blockquote>\n<p>这一系列的文章是关于学习GraphQL怎么工作以及怎么使用。寻找怎么构建一个GraphQL服务？<br>这里有一些继承于GraphQL的多种语言的库。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>GraphQL是一种针对你的API的查询语言，也是一种通过你对你的数据定义范式执行查询的服务器端运行时。<br>GraphQL不会绑定特定的数据库或者存储引擎而是使用你当前的代码和数据。</p>\n<p>一个GraphQL服务通过定义范式和范式里的字段来创建，然后为范式里的每一个字段提供功能。<br>例如，下面的GraphQL服务告诉我们谁登陆了(我)以及登陆用户的名称等一些信息：</p>\n<pre><code>type Query {\n    me: User\n}\n\ntype User {\n    id: ID\n    name: String\n}\n</code></pre><p>匹配范式里每一个字段功能：</p>\n<pre><code>function Query_me(request) {\n  return request.auth.user;\n}\n\nfunction User_name(user) {\n  return user.getName();\n}\n</code></pre><p>当一个GraphQL服务运行时(通常是一个web服务的一条URL)，它会接收GraphQL查询请求来验证和执行。<br>接收的查询首先会被检查是不是只关联到定义好的范式和字段，然后运行提供的函数产生结果。</p>\n<p>一个查询的例子：</p>\n<pre><code>{\n  me {\n    name\n  }\n}\n</code></pre><p>生成的JSON结果：</p>\n<pre><code>{\n  &quot;me&quot;: {\n    &quot;name&quot;: &quot;Luke Skywalker&quot;\n  }\n}\n</code></pre><p>学习更多GraphQL – 查询语言，范式系统，GraphQL服务如何工作以及<br>使用QraphQL解决问题的最佳实践 – 请阅读以下章节。</p>\n<h1 id=\"查询和修改-Queries-and-Mutations\"><a href=\"#查询和修改-Queries-and-Mutations\" class=\"headerlink\" title=\"查询和修改(Queries and Mutations)\"></a>查询和修改(Queries and Mutations)</h1><p>在这个章节，你将详细地学习如何在一个GrapQL服务器上查询。</p>\n<h3 id=\"字段-Fields\"><a href=\"#字段-Fields\" class=\"headerlink\" title=\"字段(Fields)\"></a>字段(Fields)</h3><p>最基本的，GraphQL可以请求对象上的指定字段。让我们看一个非常简单的查询以及结果：</p>\n<pre><code>{\n  hero {\n    name\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}\n</code></pre><p>你可以直接地看到查询语句和结果是一样的结构。这是GraphQL最基本的功能，因为服务器明确地知道客户<br>需要哪些字段，所以你可以得到你预期的结果。</p>\n<p>在上面的例子中，字段name作为一个string类型返回，那个名字是星际大战主英雄的名字，<code>R2-D2</code>。</p>\n<blockquote>\n<p>顺便提一句 - 上面的查询语句是交互式的。也就是你可以按你的意愿改变结构并且得到对应的结果。<br>尝试在<code>hero</code>对象的查询语句里增加一个<code>appearsIn</code>字段并看看新的结果。</p>\n</blockquote>\n<p>在上个例子中，我们得到了个字符串当我们要求返回hero的name字段，其实返回的字段也可以是对象。<br>在例子中，你可以为返回的对象设置级联字段<em>sub-selection</em>。GraphQL查询可以联通相关的对象以及字段，<br>让客户端在一个请求中得到所有需要的相关数据，而不是像传统REST架构那样向服务器往返请求多次。</p>\n<pre><code>{\n  hero {\n    name\n    # Queries can have comments!\n    friends {\n      name\n    }\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}\n</code></pre><p>注意上面的例子，字段<code>friends</code>返回了一个数组。GraphQL查询对于单个项和列表项看起来相同，<br>但是我们根据给定的模式知道预期的内容。</p>\n<h3 id=\"参数-Arguments\"><a href=\"#参数-Arguments\" class=\"headerlink\" title=\"参数(Arguments)\"></a>参数(Arguments)</h3><p>如果我们唯一可以做的只是遍历对象以及其字段，那GraphQL已经是获取数据非常有用的语言。但是，当你<br>将参数传递给字段时，这就变的更有趣了。</p>\n<pre><code>{\n  human(id: &quot;1000&quot;) {\n    name\n    height\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 1.72\n    }\n  }\n}\n</code></pre><p>像REST系统，你只能传递一组参数-通过查询参数和请求URL。但是在GraphQL中，每个字段和嵌套对象都<br>可以获得自己的一组参数。从而使GraphQL可以替代多个API提取。你甚至可以将参数传递到标量字段中，<br>以便在服务器上实现数据转换，而不是分别在每个客户端上执行数据转换。</p>\n<pre><code>{\n  human(id: &quot;1000&quot;) {\n    name\n    height(unit: FOOT)\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 5.6430448\n    }\n  }\n}\n</code></pre><p>参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限选项<br>（在这种情况下是长度单位，或者是METER或FOOT）之一。GraphQL带有自己的默认类型，但是在GraphQL上<br>也可以自定义类型，自定义类型也可以在传输数据的时候序列化。</p>\n<p><a href=\"http://graphql.org/learn/schema/\" target=\"_blank\" rel=\"noopener\">更多GraplQL类型内容</a></p>\n<h3 id=\"别名-Aliases\"><a href=\"#别名-Aliases\" class=\"headerlink\" title=\"别名(Aliases)\"></a>别名(Aliases)</h3><p>如果你观察仔细，你可能已经发现了，返回的结果对象字段的名字匹配查询的字段但不包括参数，<br>所以你不能直接的通过不同的参数查询同样的字段。这样你就需要别名-它可以让你把返回的结果重命名<br>成任何其他你想要的。</p>\n<pre><code>{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;empireHero&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;\n    },\n    &quot;jediHero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}\n</code></pre><p>在上面的例子中，两个字段本应该有冲突，但是我们给他们定义了不同的别名后，<br>就可以在一个请求中获取所有的结果。</p>\n","site":{"data":{}},"excerpt":"<p>最近在学习<a href=\"http://www.graphql.org/\" target=\"_blank\" rel=\"noopener\">GraphQL</a> API查询语言，想把官网的介绍文档翻译一下，学习的同时分享知识。</p>\n<blockquote>\n<p>这一系列的文章是关于学习GraphQL怎么工作以及怎么使用。寻找怎么构建一个GraphQL服务？<br>这里有一些继承于GraphQL的多种语言的库。</p>\n</blockquote>","more":"<p>GraphQL是一种针对你的API的查询语言，也是一种通过你对你的数据定义范式执行查询的服务器端运行时。<br>GraphQL不会绑定特定的数据库或者存储引擎而是使用你当前的代码和数据。</p>\n<p>一个GraphQL服务通过定义范式和范式里的字段来创建，然后为范式里的每一个字段提供功能。<br>例如，下面的GraphQL服务告诉我们谁登陆了(我)以及登陆用户的名称等一些信息：</p>\n<pre><code>type Query {\n    me: User\n}\n\ntype User {\n    id: ID\n    name: String\n}\n</code></pre><p>匹配范式里每一个字段功能：</p>\n<pre><code>function Query_me(request) {\n  return request.auth.user;\n}\n\nfunction User_name(user) {\n  return user.getName();\n}\n</code></pre><p>当一个GraphQL服务运行时(通常是一个web服务的一条URL)，它会接收GraphQL查询请求来验证和执行。<br>接收的查询首先会被检查是不是只关联到定义好的范式和字段，然后运行提供的函数产生结果。</p>\n<p>一个查询的例子：</p>\n<pre><code>{\n  me {\n    name\n  }\n}\n</code></pre><p>生成的JSON结果：</p>\n<pre><code>{\n  &quot;me&quot;: {\n    &quot;name&quot;: &quot;Luke Skywalker&quot;\n  }\n}\n</code></pre><p>学习更多GraphQL – 查询语言，范式系统，GraphQL服务如何工作以及<br>使用QraphQL解决问题的最佳实践 – 请阅读以下章节。</p>\n<h1 id=\"查询和修改-Queries-and-Mutations\"><a href=\"#查询和修改-Queries-and-Mutations\" class=\"headerlink\" title=\"查询和修改(Queries and Mutations)\"></a>查询和修改(Queries and Mutations)</h1><p>在这个章节，你将详细地学习如何在一个GrapQL服务器上查询。</p>\n<h3 id=\"字段-Fields\"><a href=\"#字段-Fields\" class=\"headerlink\" title=\"字段(Fields)\"></a>字段(Fields)</h3><p>最基本的，GraphQL可以请求对象上的指定字段。让我们看一个非常简单的查询以及结果：</p>\n<pre><code>{\n  hero {\n    name\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}\n</code></pre><p>你可以直接地看到查询语句和结果是一样的结构。这是GraphQL最基本的功能，因为服务器明确地知道客户<br>需要哪些字段，所以你可以得到你预期的结果。</p>\n<p>在上面的例子中，字段name作为一个string类型返回，那个名字是星际大战主英雄的名字，<code>R2-D2</code>。</p>\n<blockquote>\n<p>顺便提一句 - 上面的查询语句是交互式的。也就是你可以按你的意愿改变结构并且得到对应的结果。<br>尝试在<code>hero</code>对象的查询语句里增加一个<code>appearsIn</code>字段并看看新的结果。</p>\n</blockquote>\n<p>在上个例子中，我们得到了个字符串当我们要求返回hero的name字段，其实返回的字段也可以是对象。<br>在例子中，你可以为返回的对象设置级联字段<em>sub-selection</em>。GraphQL查询可以联通相关的对象以及字段，<br>让客户端在一个请求中得到所有需要的相关数据，而不是像传统REST架构那样向服务器往返请求多次。</p>\n<pre><code>{\n  hero {\n    name\n    # Queries can have comments!\n    friends {\n      name\n    }\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}\n</code></pre><p>注意上面的例子，字段<code>friends</code>返回了一个数组。GraphQL查询对于单个项和列表项看起来相同，<br>但是我们根据给定的模式知道预期的内容。</p>\n<h3 id=\"参数-Arguments\"><a href=\"#参数-Arguments\" class=\"headerlink\" title=\"参数(Arguments)\"></a>参数(Arguments)</h3><p>如果我们唯一可以做的只是遍历对象以及其字段，那GraphQL已经是获取数据非常有用的语言。但是，当你<br>将参数传递给字段时，这就变的更有趣了。</p>\n<pre><code>{\n  human(id: &quot;1000&quot;) {\n    name\n    height\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 1.72\n    }\n  }\n}\n</code></pre><p>像REST系统，你只能传递一组参数-通过查询参数和请求URL。但是在GraphQL中，每个字段和嵌套对象都<br>可以获得自己的一组参数。从而使GraphQL可以替代多个API提取。你甚至可以将参数传递到标量字段中，<br>以便在服务器上实现数据转换，而不是分别在每个客户端上执行数据转换。</p>\n<pre><code>{\n  human(id: &quot;1000&quot;) {\n    name\n    height(unit: FOOT)\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 5.6430448\n    }\n  }\n}\n</code></pre><p>参数可以是很多不同的类型。在上面的例子中，我们使用了一个枚举类型，它表示一组有限选项<br>（在这种情况下是长度单位，或者是METER或FOOT）之一。GraphQL带有自己的默认类型，但是在GraphQL上<br>也可以自定义类型，自定义类型也可以在传输数据的时候序列化。</p>\n<p><a href=\"http://graphql.org/learn/schema/\" target=\"_blank\" rel=\"noopener\">更多GraplQL类型内容</a></p>\n<h3 id=\"别名-Aliases\"><a href=\"#别名-Aliases\" class=\"headerlink\" title=\"别名(Aliases)\"></a>别名(Aliases)</h3><p>如果你观察仔细，你可能已经发现了，返回的结果对象字段的名字匹配查询的字段但不包括参数，<br>所以你不能直接的通过不同的参数查询同样的字段。这样你就需要别名-它可以让你把返回的结果重命名<br>成任何其他你想要的。</p>\n<pre><code>{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n结果：\n{\n  &quot;data&quot;: {\n    &quot;empireHero&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;\n    },\n    &quot;jediHero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}\n</code></pre><p>在上面的例子中，两个字段本应该有冲突，但是我们给他们定义了不同的别名后，<br>就可以在一个请求中获取所有的结果。</p>"},{"title":"Leo小站，我的所学所想","date":"2017-03-29T14:58:16.000Z","_content":"这是我第一篇博客，感觉搞技术的还是需要有一个记录所思的地方，也就有了这个博客网站\n目标是每周更新，对MD的语法也还不太熟悉，一切慢慢来\n也欢迎大家来这里分享，讨论！\n\n<!--more-->\n\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220626.jpg\" alt=\"pic\" width=\"800px\">\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220620.jpg\" alt=\"pic2\" width=\"800px\">\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220613.jpg\" alt=\"pic3\" width=\"800px\">\n\n\n以上\nGood Luck!","source":"_posts/firstpost.md","raw":"---\ntitle: Leo小站，我的所学所想\ndate: 2017-03-29 22:58:16\ntags: 第一篇\n---\n这是我第一篇博客，感觉搞技术的还是需要有一个记录所思的地方，也就有了这个博客网站\n目标是每周更新，对MD的语法也还不太熟悉，一切慢慢来\n也欢迎大家来这里分享，讨论！\n\n<!--more-->\n\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220626.jpg\" alt=\"pic\" width=\"800px\">\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220620.jpg\" alt=\"pic2\" width=\"800px\">\n\n<img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220613.jpg\" alt=\"pic3\" width=\"800px\">\n\n\n以上\nGood Luck!","slug":"firstpost","published":1,"updated":"2018-12-03T07:35:22.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2pua0007plp4epj8gjk8","content":"<p>这是我第一篇博客，感觉搞技术的还是需要有一个记录所思的地方，也就有了这个博客网站<br>目标是每周更新，对MD的语法也还不太熟悉，一切慢慢来<br>也欢迎大家来这里分享，讨论！</p>\n<a id=\"more\"></a>\n<p><img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220626.jpg\" alt=\"pic\" width=\"800px\"></p>\n<p><img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220620.jpg\" alt=\"pic2\" width=\"800px\"></p>\n<p><img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220613.jpg\" alt=\"pic3\" width=\"800px\"></p>\n<p>以上<br>Good Luck!</p>\n","site":{"data":{}},"excerpt":"<p>这是我第一篇博客，感觉搞技术的还是需要有一个记录所思的地方，也就有了这个博客网站<br>目标是每周更新，对MD的语法也还不太熟悉，一切慢慢来<br>也欢迎大家来这里分享，讨论！</p>","more":"<p><img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220626.jpg\" alt=\"pic\" width=\"800px\"></p>\n<p><img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220620.jpg\" alt=\"pic2\" width=\"800px\"></p>\n<p><img src=\"http://img.wqzhang.top/QQ%E5%9B%BE%E7%89%8720170324220613.jpg\" alt=\"pic3\" width=\"800px\"></p>\n<p>以上<br>Good Luck!</p>"},{"title":"初次使用GraphQL","date":"2017-04-28T06:28:07.000Z","reward":true,"_content":"第一次使用graphQL进行数据的查询和读取\n总的来说，graphQL本身挺好理解的,它是定义了新的一种数据交流方式\n由于我用的是`java`语言，所以这里用了[graphql-java](https://github.com/graphql-java/graphql-java)的实现\n但是中间有个关键点被我误解了，耽误了挺久的 --！\n<!--more-->\n\n构建了一个简单的书本信息和分类信息表进行测试，表结构如下：\n```java\n\t//book\n\t@Id\n\tprivate String id;\n\tprivate String name;\n\tprivate String book_category_id;\n\t\n\t//book_category\n\t@Id\n\tprivate String id;\n\tprivate String name;\n```\n主要想用graphQL来显示单个查询和关联查询，并且对返回的字段可控制\n项目使用了Spring-boot以及JPA来构建\n\n在graphQL中，首先根据数据库结构定义返回结构体，也就是`GraphQLOutputType`对象\n在我们的项目中，有两个返回结构体需要定义\n```java\n\tprivate GraphQLOutputType bookType;\n\tprivate GraphQLOutputType categoryType;\n```\n然后定义一个初始化方法对上面两个`GraphQLOutputType`初始化\n```java\n\t/**\n\t * book\n\t */\n\tcategoryType = newObject()\n\t        .name(\"BookCategory\")\n\t        .field(newFieldDefinition().name(\"id\").type(GraphQLString).build())\n\t        .field(newFieldDefinition().name(\"name\").type(GraphQLString).build())\n\t        .build();\n\t\t\n\t/**\n\t * book\n\t */\n\tbookType = newObject()\n\t         .name(\"Book\")\n\t         .field(newFieldDefinition().name(\"id\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"name\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"book_category_id\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"bookCategory\").type(categoryType).build())\n\t         .build();\n\t}\n```\n然后根据上面定义的结构，定义所需要返回的结构\n这里有两点需要注意，定义的`name`属性对应了返回的具体结构体\n另一个点就是坑我挺久的`dataFetcher`,它只提供了结构，不会帮你去获取数据\n具体数据信息还是需要自己去获取，不管你是使用原生的jdbc，还是jpa，或者其他持久层框架\n并且返回的数据结构需要和定义的一致\n\n我这里定了两个返回结构，book对应单本书籍信息，books对应书本列表信息：\n```java\n\tprivate GraphQLFieldDefinition createBookField() {\n        return GraphQLFieldDefinition.newFieldDefinition()\n                .name(\"book\")\n                .type(bookType)\n                .argument(newArgument().name(\"id\").type(GraphQLString).build())\n                .dataFetcher(environment -> {\n                \tString id = environment.getArgument(\"id\");\n                    logger.debug(id);\n\n                \tBook book = bookService.getBookById(id);\n                \treturn book;\n                })\n                .build();\n    }\n\t\n    private GraphQLFieldDefinition createBooksField() {\n        return GraphQLFieldDefinition.newFieldDefinition()\n                .name(\"books\")\n                .type(new GraphQLList(bookType))\n                .dataFetcher(environment -> {\n                    \n                    List<Book> list = new ArrayList<Book>();\n                    list = bookService.getAllBooks();\n                \treturn list;\n                })\n                .build();\n    }\n```\n\n`tyep`属性里对象名就是对应了我们上面定义的`GraphQLOutputType`对象\n如果返回的是数组，就需要用`GraphQLList`对象进行包裹\n在`book`返回结构体重还定义了`argument`参数，这样可以通过参数来获取对应的数据\n\n最后我们再把定义好的返回方法与GraphQLSchema对象设置好，这个对象才是我们在controller\n里的操作对象，再将设置好的对象返回：\n```java\n\tpublic GraphQLSchema getGraphSchema() {\n        initOutputType();\n        schema = GraphQLSchema.newSchema().query(newObject()\n                .name(\"GraphQuery\")\n                .field(createBookField())\n                .field(createBooksField())\n                .build()).build();\n        return schema;\n    }\n```\n\n最后我们在定义一个控制器用来访问数据，由于通过graphQL读取数据需要给出一个数据结构，\n我提供了一个默认的结构：\n```java\n\t@RequestMapping(value = \"/books\", method = RequestMethod.GET, produces = \"application/hal+json;charset=UTF-8\")\n\tpublic HttpEntity<?> getBatch(@RequestParam(required = false, \n\t\tdefaultValue = \"{books {id,name,bookCategory{name}}}\") String query) {\n\t\t\n\t\tlogger.debug(query);\n\t\tGraphQLSchema schema = graphQLTest.getGraphSchema();\n\t\t\n\t\tMap<String, Object> result2 = (Map<String, Object>) new GraphQL(schema).execute(query).getData();\n\t\t\n        return new ResponseEntity<>(result2, HttpStatus.OK);\n    }\n```\n把整个项目运行起来就可以看到相关的结果了：\n\n1.采用默认的query语句`{books {id,name,bookCategory{name}}}`\n![pic1](http://img.wqzhang.top/graphqlresult1.png)\n\n2.更换query语句结构为`{books {id,name}}`\n![pic2](http://img.wqzhang.top/graphqlresult2.png)\n\n3.更换query查询类型，通过id查询单个book信息`{book (id:\"1\") {id,name,bookCategory{name}}}`\n![pic3](http://img.wqzhang.top/graphqlresult3.png)\n\n至于grapgQL的其他特性，包括更新数据等等，我将会在后面更新，thanks！\n","source":"_posts/graphsql2.md","raw":"---\ntitle: 初次使用GraphQL\ndate: 2017-04-28 14:28:07\ntags: graphql\nreward: true\n---\n第一次使用graphQL进行数据的查询和读取\n总的来说，graphQL本身挺好理解的,它是定义了新的一种数据交流方式\n由于我用的是`java`语言，所以这里用了[graphql-java](https://github.com/graphql-java/graphql-java)的实现\n但是中间有个关键点被我误解了，耽误了挺久的 --！\n<!--more-->\n\n构建了一个简单的书本信息和分类信息表进行测试，表结构如下：\n```java\n\t//book\n\t@Id\n\tprivate String id;\n\tprivate String name;\n\tprivate String book_category_id;\n\t\n\t//book_category\n\t@Id\n\tprivate String id;\n\tprivate String name;\n```\n主要想用graphQL来显示单个查询和关联查询，并且对返回的字段可控制\n项目使用了Spring-boot以及JPA来构建\n\n在graphQL中，首先根据数据库结构定义返回结构体，也就是`GraphQLOutputType`对象\n在我们的项目中，有两个返回结构体需要定义\n```java\n\tprivate GraphQLOutputType bookType;\n\tprivate GraphQLOutputType categoryType;\n```\n然后定义一个初始化方法对上面两个`GraphQLOutputType`初始化\n```java\n\t/**\n\t * book\n\t */\n\tcategoryType = newObject()\n\t        .name(\"BookCategory\")\n\t        .field(newFieldDefinition().name(\"id\").type(GraphQLString).build())\n\t        .field(newFieldDefinition().name(\"name\").type(GraphQLString).build())\n\t        .build();\n\t\t\n\t/**\n\t * book\n\t */\n\tbookType = newObject()\n\t         .name(\"Book\")\n\t         .field(newFieldDefinition().name(\"id\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"name\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"book_category_id\").type(GraphQLString).build())\n\t         .field(newFieldDefinition().name(\"bookCategory\").type(categoryType).build())\n\t         .build();\n\t}\n```\n然后根据上面定义的结构，定义所需要返回的结构\n这里有两点需要注意，定义的`name`属性对应了返回的具体结构体\n另一个点就是坑我挺久的`dataFetcher`,它只提供了结构，不会帮你去获取数据\n具体数据信息还是需要自己去获取，不管你是使用原生的jdbc，还是jpa，或者其他持久层框架\n并且返回的数据结构需要和定义的一致\n\n我这里定了两个返回结构，book对应单本书籍信息，books对应书本列表信息：\n```java\n\tprivate GraphQLFieldDefinition createBookField() {\n        return GraphQLFieldDefinition.newFieldDefinition()\n                .name(\"book\")\n                .type(bookType)\n                .argument(newArgument().name(\"id\").type(GraphQLString).build())\n                .dataFetcher(environment -> {\n                \tString id = environment.getArgument(\"id\");\n                    logger.debug(id);\n\n                \tBook book = bookService.getBookById(id);\n                \treturn book;\n                })\n                .build();\n    }\n\t\n    private GraphQLFieldDefinition createBooksField() {\n        return GraphQLFieldDefinition.newFieldDefinition()\n                .name(\"books\")\n                .type(new GraphQLList(bookType))\n                .dataFetcher(environment -> {\n                    \n                    List<Book> list = new ArrayList<Book>();\n                    list = bookService.getAllBooks();\n                \treturn list;\n                })\n                .build();\n    }\n```\n\n`tyep`属性里对象名就是对应了我们上面定义的`GraphQLOutputType`对象\n如果返回的是数组，就需要用`GraphQLList`对象进行包裹\n在`book`返回结构体重还定义了`argument`参数，这样可以通过参数来获取对应的数据\n\n最后我们再把定义好的返回方法与GraphQLSchema对象设置好，这个对象才是我们在controller\n里的操作对象，再将设置好的对象返回：\n```java\n\tpublic GraphQLSchema getGraphSchema() {\n        initOutputType();\n        schema = GraphQLSchema.newSchema().query(newObject()\n                .name(\"GraphQuery\")\n                .field(createBookField())\n                .field(createBooksField())\n                .build()).build();\n        return schema;\n    }\n```\n\n最后我们在定义一个控制器用来访问数据，由于通过graphQL读取数据需要给出一个数据结构，\n我提供了一个默认的结构：\n```java\n\t@RequestMapping(value = \"/books\", method = RequestMethod.GET, produces = \"application/hal+json;charset=UTF-8\")\n\tpublic HttpEntity<?> getBatch(@RequestParam(required = false, \n\t\tdefaultValue = \"{books {id,name,bookCategory{name}}}\") String query) {\n\t\t\n\t\tlogger.debug(query);\n\t\tGraphQLSchema schema = graphQLTest.getGraphSchema();\n\t\t\n\t\tMap<String, Object> result2 = (Map<String, Object>) new GraphQL(schema).execute(query).getData();\n\t\t\n        return new ResponseEntity<>(result2, HttpStatus.OK);\n    }\n```\n把整个项目运行起来就可以看到相关的结果了：\n\n1.采用默认的query语句`{books {id,name,bookCategory{name}}}`\n![pic1](http://img.wqzhang.top/graphqlresult1.png)\n\n2.更换query语句结构为`{books {id,name}}`\n![pic2](http://img.wqzhang.top/graphqlresult2.png)\n\n3.更换query查询类型，通过id查询单个book信息`{book (id:\"1\") {id,name,bookCategory{name}}}`\n![pic3](http://img.wqzhang.top/graphqlresult3.png)\n\n至于grapgQL的其他特性，包括更新数据等等，我将会在后面更新，thanks！\n","slug":"graphsql2","published":1,"updated":"2018-12-03T07:34:40.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2puc000aplp4myb57vrn","content":"<p>第一次使用graphQL进行数据的查询和读取<br>总的来说，graphQL本身挺好理解的,它是定义了新的一种数据交流方式<br>由于我用的是<code>java</code>语言，所以这里用了<a href=\"https://github.com/graphql-java/graphql-java\" target=\"_blank\" rel=\"noopener\">graphql-java</a>的实现<br>但是中间有个关键点被我误解了，耽误了挺久的 –！<br><a id=\"more\"></a></p>\n<p>构建了一个简单的书本信息和分类信息表进行测试，表结构如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book</span></span><br><span class=\"line\"><span class=\"meta\">@Id</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String book_category_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//book_category</span></span><br><span class=\"line\"><span class=\"meta\">@Id</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure></p>\n<p>主要想用graphQL来显示单个查询和关联查询，并且对返回的字段可控制<br>项目使用了Spring-boot以及JPA来构建</p>\n<p>在graphQL中，首先根据数据库结构定义返回结构体，也就是<code>GraphQLOutputType</code>对象<br>在我们的项目中，有两个返回结构体需要定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> GraphQLOutputType bookType;</span><br><span class=\"line\"><span class=\"keyword\">private</span> GraphQLOutputType categoryType;</span><br></pre></td></tr></table></figure></p>\n<p>然后定义一个初始化方法对上面两个<code>GraphQLOutputType</code>初始化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * book</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">categoryType = newObject()</span><br><span class=\"line\">        .name(<span class=\"string\">\"BookCategory\"</span>)</span><br><span class=\"line\">        .field(newFieldDefinition().name(<span class=\"string\">\"id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">        .field(newFieldDefinition().name(<span class=\"string\">\"name\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * book</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">bookType = newObject()</span><br><span class=\"line\">         .name(<span class=\"string\">\"Book\"</span>)</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"name\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"book_category_id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"bookCategory\"</span>).type(categoryType).build())</span><br><span class=\"line\">         .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后根据上面定义的结构，定义所需要返回的结构<br>这里有两点需要注意，定义的<code>name</code>属性对应了返回的具体结构体<br>另一个点就是坑我挺久的<code>dataFetcher</code>,它只提供了结构，不会帮你去获取数据<br>具体数据信息还是需要自己去获取，不管你是使用原生的jdbc，还是jpa，或者其他持久层框架<br>并且返回的数据结构需要和定义的一致</p>\n<p>我这里定了两个返回结构，book对应单本书籍信息，books对应书本列表信息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> GraphQLFieldDefinition <span class=\"title\">createBookField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> GraphQLFieldDefinition.newFieldDefinition()</span><br><span class=\"line\">               .name(<span class=\"string\">\"book\"</span>)</span><br><span class=\"line\">               .type(bookType)</span><br><span class=\"line\">               .argument(newArgument().name(<span class=\"string\">\"id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">               .dataFetcher(environment -&gt; &#123;</span><br><span class=\"line\">               \tString id = environment.getArgument(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">                   logger.debug(id);</span><br><span class=\"line\"></span><br><span class=\"line\">               \tBook book = bookService.getBookById(id);</span><br><span class=\"line\">               \t<span class=\"keyword\">return</span> book;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> GraphQLFieldDefinition <span class=\"title\">createBooksField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> GraphQLFieldDefinition.newFieldDefinition()</span><br><span class=\"line\">               .name(<span class=\"string\">\"books\"</span>)</span><br><span class=\"line\">               .type(<span class=\"keyword\">new</span> GraphQLList(bookType))</span><br><span class=\"line\">               .dataFetcher(environment -&gt; &#123;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                   List&lt;Book&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Book&gt;();</span><br><span class=\"line\">                   list = bookService.getAllBooks();</span><br><span class=\"line\">               \t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>tyep</code>属性里对象名就是对应了我们上面定义的<code>GraphQLOutputType</code>对象<br>如果返回的是数组，就需要用<code>GraphQLList</code>对象进行包裹<br>在<code>book</code>返回结构体重还定义了<code>argument</code>参数，这样可以通过参数来获取对应的数据</p>\n<p>最后我们再把定义好的返回方法与GraphQLSchema对象设置好，这个对象才是我们在controller<br>里的操作对象，再将设置好的对象返回：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> GraphQLSchema <span class=\"title\">getGraphSchema</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       initOutputType();</span><br><span class=\"line\">       schema = GraphQLSchema.newSchema().query(newObject()</span><br><span class=\"line\">               .name(<span class=\"string\">\"GraphQuery\"</span>)</span><br><span class=\"line\">               .field(createBookField())</span><br><span class=\"line\">               .field(createBooksField())</span><br><span class=\"line\">               .build()).build();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> schema;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后我们在定义一个控制器用来访问数据，由于通过graphQL读取数据需要给出一个数据结构，<br>我提供了一个默认的结构：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/books\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/hal+json;charset=UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> HttpEntity&lt;?&gt; getBatch(<span class=\"meta\">@RequestParam</span>(required = <span class=\"keyword\">false</span>, </span><br><span class=\"line\">\tdefaultValue = <span class=\"string\">\"&#123;books &#123;id,name,bookCategory&#123;name&#125;&#125;&#125;\"</span>) String query) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlogger.debug(query);</span><br><span class=\"line\">\tGraphQLSchema schema = graphQLTest.getGraphSchema();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tMap&lt;String, Object&gt; result2 = (Map&lt;String, Object&gt;) <span class=\"keyword\">new</span> GraphQL(schema).execute(query).getData();</span><br><span class=\"line\">\t</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(result2, HttpStatus.OK);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>把整个项目运行起来就可以看到相关的结果了：</p>\n<p>1.采用默认的query语句<code>{books {id,name,bookCategory{name}}}</code><br><img src=\"http://img.wqzhang.top/graphqlresult1.png\" alt=\"pic1\"></p>\n<p>2.更换query语句结构为<code>{books {id,name}}</code><br><img src=\"http://img.wqzhang.top/graphqlresult2.png\" alt=\"pic2\"></p>\n<p>3.更换query查询类型，通过id查询单个book信息<code>{book (id:&quot;1&quot;) {id,name,bookCategory{name}}}</code><br><img src=\"http://img.wqzhang.top/graphqlresult3.png\" alt=\"pic3\"></p>\n<p>至于grapgQL的其他特性，包括更新数据等等，我将会在后面更新，thanks！</p>\n","site":{"data":{}},"excerpt":"<p>第一次使用graphQL进行数据的查询和读取<br>总的来说，graphQL本身挺好理解的,它是定义了新的一种数据交流方式<br>由于我用的是<code>java</code>语言，所以这里用了<a href=\"https://github.com/graphql-java/graphql-java\" target=\"_blank\" rel=\"noopener\">graphql-java</a>的实现<br>但是中间有个关键点被我误解了，耽误了挺久的 –！<br>","more":"</p>\n<p>构建了一个简单的书本信息和分类信息表进行测试，表结构如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book</span></span><br><span class=\"line\"><span class=\"meta\">@Id</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String book_category_id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//book_category</span></span><br><span class=\"line\"><span class=\"meta\">@Id</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure></p>\n<p>主要想用graphQL来显示单个查询和关联查询，并且对返回的字段可控制<br>项目使用了Spring-boot以及JPA来构建</p>\n<p>在graphQL中，首先根据数据库结构定义返回结构体，也就是<code>GraphQLOutputType</code>对象<br>在我们的项目中，有两个返回结构体需要定义<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> GraphQLOutputType bookType;</span><br><span class=\"line\"><span class=\"keyword\">private</span> GraphQLOutputType categoryType;</span><br></pre></td></tr></table></figure></p>\n<p>然后定义一个初始化方法对上面两个<code>GraphQLOutputType</code>初始化<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * book</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">categoryType = newObject()</span><br><span class=\"line\">        .name(<span class=\"string\">\"BookCategory\"</span>)</span><br><span class=\"line\">        .field(newFieldDefinition().name(<span class=\"string\">\"id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">        .field(newFieldDefinition().name(<span class=\"string\">\"name\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">        .build();</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * book</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">bookType = newObject()</span><br><span class=\"line\">         .name(<span class=\"string\">\"Book\"</span>)</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"name\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"book_category_id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">         .field(newFieldDefinition().name(<span class=\"string\">\"bookCategory\"</span>).type(categoryType).build())</span><br><span class=\"line\">         .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后根据上面定义的结构，定义所需要返回的结构<br>这里有两点需要注意，定义的<code>name</code>属性对应了返回的具体结构体<br>另一个点就是坑我挺久的<code>dataFetcher</code>,它只提供了结构，不会帮你去获取数据<br>具体数据信息还是需要自己去获取，不管你是使用原生的jdbc，还是jpa，或者其他持久层框架<br>并且返回的数据结构需要和定义的一致</p>\n<p>我这里定了两个返回结构，book对应单本书籍信息，books对应书本列表信息：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> GraphQLFieldDefinition <span class=\"title\">createBookField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> GraphQLFieldDefinition.newFieldDefinition()</span><br><span class=\"line\">               .name(<span class=\"string\">\"book\"</span>)</span><br><span class=\"line\">               .type(bookType)</span><br><span class=\"line\">               .argument(newArgument().name(<span class=\"string\">\"id\"</span>).type(GraphQLString).build())</span><br><span class=\"line\">               .dataFetcher(environment -&gt; &#123;</span><br><span class=\"line\">               \tString id = environment.getArgument(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">                   logger.debug(id);</span><br><span class=\"line\"></span><br><span class=\"line\">               \tBook book = bookService.getBookById(id);</span><br><span class=\"line\">               \t<span class=\"keyword\">return</span> book;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> GraphQLFieldDefinition <span class=\"title\">createBooksField</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> GraphQLFieldDefinition.newFieldDefinition()</span><br><span class=\"line\">               .name(<span class=\"string\">\"books\"</span>)</span><br><span class=\"line\">               .type(<span class=\"keyword\">new</span> GraphQLList(bookType))</span><br><span class=\"line\">               .dataFetcher(environment -&gt; &#123;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                   List&lt;Book&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Book&gt;();</span><br><span class=\"line\">                   list = bookService.getAllBooks();</span><br><span class=\"line\">               \t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">               &#125;)</span><br><span class=\"line\">               .build();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>tyep</code>属性里对象名就是对应了我们上面定义的<code>GraphQLOutputType</code>对象<br>如果返回的是数组，就需要用<code>GraphQLList</code>对象进行包裹<br>在<code>book</code>返回结构体重还定义了<code>argument</code>参数，这样可以通过参数来获取对应的数据</p>\n<p>最后我们再把定义好的返回方法与GraphQLSchema对象设置好，这个对象才是我们在controller<br>里的操作对象，再将设置好的对象返回：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> GraphQLSchema <span class=\"title\">getGraphSchema</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       initOutputType();</span><br><span class=\"line\">       schema = GraphQLSchema.newSchema().query(newObject()</span><br><span class=\"line\">               .name(<span class=\"string\">\"GraphQuery\"</span>)</span><br><span class=\"line\">               .field(createBookField())</span><br><span class=\"line\">               .field(createBooksField())</span><br><span class=\"line\">               .build()).build();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> schema;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后我们在定义一个控制器用来访问数据，由于通过graphQL读取数据需要给出一个数据结构，<br>我提供了一个默认的结构：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/books\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/hal+json;charset=UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> HttpEntity&lt;?&gt; getBatch(<span class=\"meta\">@RequestParam</span>(required = <span class=\"keyword\">false</span>, </span><br><span class=\"line\">\tdefaultValue = <span class=\"string\">\"&#123;books &#123;id,name,bookCategory&#123;name&#125;&#125;&#125;\"</span>) String query) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlogger.debug(query);</span><br><span class=\"line\">\tGraphQLSchema schema = graphQLTest.getGraphSchema();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tMap&lt;String, Object&gt; result2 = (Map&lt;String, Object&gt;) <span class=\"keyword\">new</span> GraphQL(schema).execute(query).getData();</span><br><span class=\"line\">\t</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;&gt;(result2, HttpStatus.OK);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>把整个项目运行起来就可以看到相关的结果了：</p>\n<p>1.采用默认的query语句<code>{books {id,name,bookCategory{name}}}</code><br><img src=\"http://img.wqzhang.top/graphqlresult1.png\" alt=\"pic1\"></p>\n<p>2.更换query语句结构为<code>{books {id,name}}</code><br><img src=\"http://img.wqzhang.top/graphqlresult2.png\" alt=\"pic2\"></p>\n<p>3.更换query查询类型，通过id查询单个book信息<code>{book (id:&quot;1&quot;) {id,name,bookCategory{name}}}</code><br><img src=\"http://img.wqzhang.top/graphqlresult3.png\" alt=\"pic3\"></p>\n<p>至于grapgQL的其他特性，包括更新数据等等，我将会在后面更新，thanks！</p>"},{"title":"说说我这段时间","date":"2017-04-10T15:47:18.000Z","_content":"\n![head](http://img.wqzhang.top/timg.jpg)\n这段时间比较烦躁\n感觉不知道接下来的路怎么走了\n\n<!--more-->\n\n做程序开发有三年了，但是一直做的是外包项目\n外包还真是像外界说的那样\n反正能不进外包就别进外包吧\n\n\n别人进的外包都是成天加班，需求一天到晚都有\n我经历的几个外包却都比较清闲\n真不知道我是该开心还是该忧伤\n毕竟过得轻松，但是也没学到太多东西\n\n\n三年时间确实太快\n去年因为一些原因来到现在这家公司\n但是也是外包，但是技术和项目相对来说更符合发展\n想着终于可以锻炼下自己\n过完年再来的时候这边项目感觉要黄了一样\n我是做后端微服务开发\n一个月都没啥需求\n我也是苦笑不得\n目前也都是修补修补发现的bug，新的需求基本没有\n\n\n过完年觉得在外包呆着确实也不是个长久之计\n投过几家简历\n不过确实着两三年学的太少，或者说不深\n接触过很多，但是沉淀下去了解的太少\n\n\n觉得最近心情也是浮躁，不知道自己该怎么走下去了\n按说做了三年程序开发应该基础业务都有一定发展\n但是现在感觉自己却很多都是一知半解\n想深入地学一样东西又不知道怎么下手\n\n\n现在这么继续下去也可以过下去\n却不是我想要的\n想要改变，却又找不到啥办法\n今天还投了家公司，投完现在感觉又不想去了\n感觉又不想改变一样，麻蛋\n\n\nPS，面试完了，估计是不会去的，\n现在还是稳定为主吧","source":"_posts/think20170410.md","raw":"---\ntitle: 说说我这段时间\ndate: 2017-04-10 23:47:18\ntags: 记事\n---\n\n![head](http://img.wqzhang.top/timg.jpg)\n这段时间比较烦躁\n感觉不知道接下来的路怎么走了\n\n<!--more-->\n\n做程序开发有三年了，但是一直做的是外包项目\n外包还真是像外界说的那样\n反正能不进外包就别进外包吧\n\n\n别人进的外包都是成天加班，需求一天到晚都有\n我经历的几个外包却都比较清闲\n真不知道我是该开心还是该忧伤\n毕竟过得轻松，但是也没学到太多东西\n\n\n三年时间确实太快\n去年因为一些原因来到现在这家公司\n但是也是外包，但是技术和项目相对来说更符合发展\n想着终于可以锻炼下自己\n过完年再来的时候这边项目感觉要黄了一样\n我是做后端微服务开发\n一个月都没啥需求\n我也是苦笑不得\n目前也都是修补修补发现的bug，新的需求基本没有\n\n\n过完年觉得在外包呆着确实也不是个长久之计\n投过几家简历\n不过确实着两三年学的太少，或者说不深\n接触过很多，但是沉淀下去了解的太少\n\n\n觉得最近心情也是浮躁，不知道自己该怎么走下去了\n按说做了三年程序开发应该基础业务都有一定发展\n但是现在感觉自己却很多都是一知半解\n想深入地学一样东西又不知道怎么下手\n\n\n现在这么继续下去也可以过下去\n却不是我想要的\n想要改变，却又找不到啥办法\n今天还投了家公司，投完现在感觉又不想去了\n感觉又不想改变一样，麻蛋\n\n\nPS，面试完了，估计是不会去的，\n现在还是稳定为主吧","slug":"think20170410","published":1,"updated":"2018-12-03T07:33:58.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2pud000bplp44m0w8sug","content":"<p><img src=\"http://img.wqzhang.top/timg.jpg\" alt=\"head\"><br>这段时间比较烦躁<br>感觉不知道接下来的路怎么走了</p>\n<a id=\"more\"></a>\n<p>做程序开发有三年了，但是一直做的是外包项目<br>外包还真是像外界说的那样<br>反正能不进外包就别进外包吧</p>\n<p>别人进的外包都是成天加班，需求一天到晚都有<br>我经历的几个外包却都比较清闲<br>真不知道我是该开心还是该忧伤<br>毕竟过得轻松，但是也没学到太多东西</p>\n<p>三年时间确实太快<br>去年因为一些原因来到现在这家公司<br>但是也是外包，但是技术和项目相对来说更符合发展<br>想着终于可以锻炼下自己<br>过完年再来的时候这边项目感觉要黄了一样<br>我是做后端微服务开发<br>一个月都没啥需求<br>我也是苦笑不得<br>目前也都是修补修补发现的bug，新的需求基本没有</p>\n<p>过完年觉得在外包呆着确实也不是个长久之计<br>投过几家简历<br>不过确实着两三年学的太少，或者说不深<br>接触过很多，但是沉淀下去了解的太少</p>\n<p>觉得最近心情也是浮躁，不知道自己该怎么走下去了<br>按说做了三年程序开发应该基础业务都有一定发展<br>但是现在感觉自己却很多都是一知半解<br>想深入地学一样东西又不知道怎么下手</p>\n<p>现在这么继续下去也可以过下去<br>却不是我想要的<br>想要改变，却又找不到啥办法<br>今天还投了家公司，投完现在感觉又不想去了<br>感觉又不想改变一样，麻蛋</p>\n<p>PS，面试完了，估计是不会去的，<br>现在还是稳定为主吧</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.wqzhang.top/timg.jpg\" alt=\"head\"><br>这段时间比较烦躁<br>感觉不知道接下来的路怎么走了</p>","more":"<p>做程序开发有三年了，但是一直做的是外包项目<br>外包还真是像外界说的那样<br>反正能不进外包就别进外包吧</p>\n<p>别人进的外包都是成天加班，需求一天到晚都有<br>我经历的几个外包却都比较清闲<br>真不知道我是该开心还是该忧伤<br>毕竟过得轻松，但是也没学到太多东西</p>\n<p>三年时间确实太快<br>去年因为一些原因来到现在这家公司<br>但是也是外包，但是技术和项目相对来说更符合发展<br>想着终于可以锻炼下自己<br>过完年再来的时候这边项目感觉要黄了一样<br>我是做后端微服务开发<br>一个月都没啥需求<br>我也是苦笑不得<br>目前也都是修补修补发现的bug，新的需求基本没有</p>\n<p>过完年觉得在外包呆着确实也不是个长久之计<br>投过几家简历<br>不过确实着两三年学的太少，或者说不深<br>接触过很多，但是沉淀下去了解的太少</p>\n<p>觉得最近心情也是浮躁，不知道自己该怎么走下去了<br>按说做了三年程序开发应该基础业务都有一定发展<br>但是现在感觉自己却很多都是一知半解<br>想深入地学一样东西又不知道怎么下手</p>\n<p>现在这么继续下去也可以过下去<br>却不是我想要的<br>想要改变，却又找不到啥办法<br>今天还投了家公司，投完现在感觉又不想去了<br>感觉又不想改变一样，麻蛋</p>\n<p>PS，面试完了，估计是不会去的，<br>现在还是稳定为主吧</p>"},{"title":"更新畅言为评论系统","date":"2017-05-22T14:41:18.000Z","_content":"\n之前一直用的友言做第三方评论系统，不知道怎么回事就罢工了\n客服找了，也留言了，都没反应\n算了算了，谁让我用别人免费的呢\n你不让我用，那我就只能换一家了\n\n现在网站访问友言的JS直接就报网关错误了。。。不知道其他用户有没有这个现象 --！\n\n![yoiyan](http://img.wqzhang.top/youyan1.jpg)\n\n<!--more-->\n\n我给他们客服留了言，一直没回应，然后本想加他们客服QQ群去了解下情况\n谁知道一搜官方的QQ号，居然是一个蜂蜜买卖群\n\n![youyan2](http://img.wqzhang.top/youyan22.jpg)\n\n这。。。\n\n![biaoqing](http://img.wqzhang.top/wulianku.jpg)\n\n\n所以，暂时我也只能换个方案了。。。也就是现在用的方案————来自sohu的 畅言\n怎么说呢，讲个就把，自定义功能也还好\n~~后面我也会继续跟友言官方联系一下，尽量还是换回来~~\n~~毕竟颜值也高啊！哈哈哈~~\n已经各种联系过友言官方了\n原来好久之前已经没人专门维护了\n那。。就这样吧，goog bye\n\n\n后记：两三周没更新了，内心满满的负罪感，不努力会很轻松。。。No No No\n这不是我想的，我会补上来的","source":"_posts/think20170522.md","raw":"---\ntitle: 更新畅言为评论系统\ndate: 2017-05-22 22:41:18\ntags: 友言 畅言 评论系统\n---\n\n之前一直用的友言做第三方评论系统，不知道怎么回事就罢工了\n客服找了，也留言了，都没反应\n算了算了，谁让我用别人免费的呢\n你不让我用，那我就只能换一家了\n\n现在网站访问友言的JS直接就报网关错误了。。。不知道其他用户有没有这个现象 --！\n\n![yoiyan](http://img.wqzhang.top/youyan1.jpg)\n\n<!--more-->\n\n我给他们客服留了言，一直没回应，然后本想加他们客服QQ群去了解下情况\n谁知道一搜官方的QQ号，居然是一个蜂蜜买卖群\n\n![youyan2](http://img.wqzhang.top/youyan22.jpg)\n\n这。。。\n\n![biaoqing](http://img.wqzhang.top/wulianku.jpg)\n\n\n所以，暂时我也只能换个方案了。。。也就是现在用的方案————来自sohu的 畅言\n怎么说呢，讲个就把，自定义功能也还好\n~~后面我也会继续跟友言官方联系一下，尽量还是换回来~~\n~~毕竟颜值也高啊！哈哈哈~~\n已经各种联系过友言官方了\n原来好久之前已经没人专门维护了\n那。。就这样吧，goog bye\n\n\n后记：两三周没更新了，内心满满的负罪感，不努力会很轻松。。。No No No\n这不是我想的，我会补上来的","slug":"think20170522","published":1,"updated":"2018-12-05T02:53:43.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpav2puo000oplp4y7oizmsf","content":"<p>之前一直用的友言做第三方评论系统，不知道怎么回事就罢工了<br>客服找了，也留言了，都没反应<br>算了算了，谁让我用别人免费的呢<br>你不让我用，那我就只能换一家了</p>\n<p>现在网站访问友言的JS直接就报网关错误了。。。不知道其他用户有没有这个现象 –！</p>\n<p><img src=\"http://img.wqzhang.top/youyan1.jpg\" alt=\"yoiyan\"></p>\n<a id=\"more\"></a>\n<p>我给他们客服留了言，一直没回应，然后本想加他们客服QQ群去了解下情况<br>谁知道一搜官方的QQ号，居然是一个蜂蜜买卖群</p>\n<p><img src=\"http://img.wqzhang.top/youyan22.jpg\" alt=\"youyan2\"></p>\n<p>这。。。</p>\n<p><img src=\"http://img.wqzhang.top/wulianku.jpg\" alt=\"biaoqing\"></p>\n<p>所以，暂时我也只能换个方案了。。。也就是现在用的方案————来自sohu的 畅言<br>怎么说呢，讲个就把，自定义功能也还好<br><del>后面我也会继续跟友言官方联系一下，尽量还是换回来</del><br><del>毕竟颜值也高啊！哈哈哈</del><br>已经各种联系过友言官方了<br>原来好久之前已经没人专门维护了<br>那。。就这样吧，goog bye</p>\n<p>后记：两三周没更新了，内心满满的负罪感，不努力会很轻松。。。No No No<br>这不是我想的，我会补上来的</p>\n","site":{"data":{}},"excerpt":"<p>之前一直用的友言做第三方评论系统，不知道怎么回事就罢工了<br>客服找了，也留言了，都没反应<br>算了算了，谁让我用别人免费的呢<br>你不让我用，那我就只能换一家了</p>\n<p>现在网站访问友言的JS直接就报网关错误了。。。不知道其他用户有没有这个现象 –！</p>\n<p><img src=\"http://img.wqzhang.top/youyan1.jpg\" alt=\"yoiyan\"></p>","more":"<p>我给他们客服留了言，一直没回应，然后本想加他们客服QQ群去了解下情况<br>谁知道一搜官方的QQ号，居然是一个蜂蜜买卖群</p>\n<p><img src=\"http://img.wqzhang.top/youyan22.jpg\" alt=\"youyan2\"></p>\n<p>这。。。</p>\n<p><img src=\"http://img.wqzhang.top/wulianku.jpg\" alt=\"biaoqing\"></p>\n<p>所以，暂时我也只能换个方案了。。。也就是现在用的方案————来自sohu的 畅言<br>怎么说呢，讲个就把，自定义功能也还好<br><del>后面我也会继续跟友言官方联系一下，尽量还是换回来</del><br><del>毕竟颜值也高啊！哈哈哈</del><br>已经各种联系过友言官方了<br>原来好久之前已经没人专门维护了<br>那。。就这样吧，goog bye</p>\n<p>后记：两三周没更新了，内心满满的负罪感，不努力会很轻松。。。No No No<br>这不是我想的，我会补上来的</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjpav2pu20002plp4rt4txtfi","tag_id":"cjpav2pu70004plp4wcdmsq87","_id":"cjpav2puc0009plp4ofmmu7sb"},{"post_id":"cjpav2pu50003plp4b0nd0wpb","tag_id":"cjpav2pub0008plp4tldozujv","_id":"cjpav2pue000dplp4nmgs2wh3"},{"post_id":"cjpav2pu80005plp45xts7d36","tag_id":"cjpav2pue000cplp4w8yqr17p","_id":"cjpav2puf000fplp4aff2eauu"},{"post_id":"cjpav2pu90006plp4sdoji4bl","tag_id":"cjpav2puf000eplp49zp5jmph","_id":"cjpav2puf000hplp4uii3dqyn"},{"post_id":"cjpav2pua0007plp4epj8gjk8","tag_id":"cjpav2puf000gplp4t0ncqhdh","_id":"cjpav2pug000jplp46k9uilqa"},{"post_id":"cjpav2puc000aplp4myb57vrn","tag_id":"cjpav2pug000iplp4gajq1o9f","_id":"cjpav2puh000lplp4htrtwi3z"},{"post_id":"cjpav2pud000bplp44m0w8sug","tag_id":"cjpav2pug000kplp4y9b9tke0","_id":"cjpav2puh000mplp4r4yst6yy"},{"post_id":"cjpav2puo000oplp4y7oizmsf","tag_id":"cjpav2pur000pplp4rldn5r23","_id":"cjpav2pur000qplp4kzli7utz"}],"Tag":[{"name":"面试 java","_id":"cjpav2pu70004plp4wcdmsq87"},{"name":"ignite","_id":"cjpav2pub0008plp4tldozujv"},{"name":"kindle 教程","_id":"cjpav2pue000cplp4w8yqr17p"},{"name":"graphQL","_id":"cjpav2puf000eplp49zp5jmph"},{"name":"第一篇","_id":"cjpav2puf000gplp4t0ncqhdh"},{"name":"graphql","_id":"cjpav2pug000iplp4gajq1o9f"},{"name":"记事","_id":"cjpav2pug000kplp4y9b9tke0"},{"name":"友言 畅言 评论系统","_id":"cjpav2pur000pplp4rldn5r23"}]}}